{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DSCOBOL This is a site that provides code examples for COBOL.","title":"Home"},{"location":"#welcome-to-dscobol","text":"This is a site that provides code examples for COBOL.","title":"Welcome to DSCOBOL"},{"location":"about/","text":"About DSCOBOL Areas that are covered GnuCOBOL - COBOL accessing DB2, Postgresql, Indexed data files, and text data files. ZOS - JCL, COBOL accessing DB2, VSAM, and QSAM MVS - COBOL and KICKS Zowe - JCL, COBOL, accessing VSAM and QSAM","title":"About"},{"location":"about/#about-dscobol","text":"","title":"About DSCOBOL"},{"location":"about/#areas-that-are-covered","text":"GnuCOBOL - COBOL accessing DB2, Postgresql, Indexed data files, and text data files. ZOS - JCL, COBOL accessing DB2, VSAM, and QSAM MVS - COBOL and KICKS Zowe - JCL, COBOL, accessing VSAM and QSAM","title":"Areas that are covered"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/","text":"Create a Basic Develoment Environment. Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu. Overview As I stated in the main overview, the host system already has a dev environment installed. As this is a new installation and you need something to code with, I am recommending the following tools to be productive: This is highly opinionated. If you have your own envionment, create that instead. build-essential : a collection of tools used to build software zsh : a different shell then bash prezto : a zsh framework Git : Source Code Management Vim : for quick edits VS Codium : Not an editor, Not an IDE, Something in the middle Java JDK : Need for Code4Z extension Some VS Codium extensions Midnight Commander (aka: mc) : A terminal based file manager An SSH key : to push code to a GitHub or GitLab or Bitbucket repository tree : Optional: a quick way to see the structure of a directory LazyGit : Optional: A terminal based Git UI : This one is really optional. You can use GitLens within VS Codium to do the same, I just like it. Build-Essential sudo apt install build-essential This might be installed already or there might be some components that are missing. Better safe then sorry. Zsh sudo apt install zsh Prezto Visit Github: Prezto and follow the instructions. You can use it as it is out of the box but I will suggest one change of two additions: Edit .zpreztorc and add git and syntax-highlighting in the zstyle ':prezto:load' pmodule \\ section: Old version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'history-substring-search' \\ 'prompt' New Version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'git' \\ 'syntax-highlighting' \\ 'history-substring-search' \\ 'prompt' Save it, close the Terminal and re-open Terminal. Git Actually, Git is already installed on PopOS but if you went the Ubuntu route, you might have to install it. sudo apt install git Vim sudo apt install vim An dependable editor. Useful for quick edits or as your main editor. VS Codium Because... why not. Go to VS Codium website . Follow the instructions: - Add GPG key - Add the repository - Update and Install codium Java JDK sudo apt install default-jdk VS Codium Extensions Open VSCodium, Open the Extensions Browser and install: Code4Z GitLens You could also go with IBM Z Open Editor instead. BUT don't have both installed at the same time. Midnight Commander (aka: mc) sudo apt install mc This is a nice terminal based file manager that I use to transfer files to/from the host/vm. QEMU networking can be a pain to setup. If I remember correctly it was easier with VirtualBox and VMware but... Just make sure you can ssh into the host. (SSH Server is up and running?) SSH-Key For instructions: Look at GitHub - Connect with SSH . Tree - Optional sudo apt install tree LazyGit - Optional Follow the instructions on the LazyGit - Github website.","title":"Install Basic Dev Env"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#create-a-basic-develoment-environment","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu.","title":"Create a Basic Develoment Environment."},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#overview","text":"As I stated in the main overview, the host system already has a dev environment installed. As this is a new installation and you need something to code with, I am recommending the following tools to be productive: This is highly opinionated. If you have your own envionment, create that instead. build-essential : a collection of tools used to build software zsh : a different shell then bash prezto : a zsh framework Git : Source Code Management Vim : for quick edits VS Codium : Not an editor, Not an IDE, Something in the middle Java JDK : Need for Code4Z extension Some VS Codium extensions Midnight Commander (aka: mc) : A terminal based file manager An SSH key : to push code to a GitHub or GitLab or Bitbucket repository tree : Optional: a quick way to see the structure of a directory LazyGit : Optional: A terminal based Git UI : This one is really optional. You can use GitLens within VS Codium to do the same, I just like it.","title":"Overview"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#build-essential","text":"sudo apt install build-essential This might be installed already or there might be some components that are missing. Better safe then sorry.","title":"Build-Essential"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#zsh","text":"sudo apt install zsh","title":"Zsh"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#prezto","text":"Visit Github: Prezto and follow the instructions. You can use it as it is out of the box but I will suggest one change of two additions: Edit .zpreztorc and add git and syntax-highlighting in the zstyle ':prezto:load' pmodule \\ section: Old version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'history-substring-search' \\ 'prompt' New Version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'git' \\ 'syntax-highlighting' \\ 'history-substring-search' \\ 'prompt' Save it, close the Terminal and re-open Terminal.","title":"Prezto"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#git","text":"Actually, Git is already installed on PopOS but if you went the Ubuntu route, you might have to install it. sudo apt install git","title":"Git"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#vim","text":"sudo apt install vim An dependable editor. Useful for quick edits or as your main editor.","title":"Vim"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#vs-codium","text":"Because... why not. Go to VS Codium website . Follow the instructions: - Add GPG key - Add the repository - Update and Install codium","title":"VS Codium"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#java-jdk","text":"sudo apt install default-jdk","title":"Java JDK"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#vs-codium-extensions","text":"Open VSCodium, Open the Extensions Browser and install: Code4Z GitLens You could also go with IBM Z Open Editor instead. BUT don't have both installed at the same time.","title":"VS Codium Extensions"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#midnight-commander-aka-mc","text":"sudo apt install mc This is a nice terminal based file manager that I use to transfer files to/from the host/vm. QEMU networking can be a pain to setup. If I remember correctly it was easier with VirtualBox and VMware but... Just make sure you can ssh into the host. (SSH Server is up and running?)","title":"Midnight Commander (aka: mc)"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#ssh-key","text":"For instructions: Look at GitHub - Connect with SSH .","title":"SSH-Key"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#tree-optional","text":"sudo apt install tree","title":"Tree - Optional"},{"location":"user-guides/install-db2-luw/install-basic-dev-env/#lazygit-optional","text":"Follow the instructions on the LazyGit - Github website.","title":"LazyGit - Optional"},{"location":"user-guides/install-db2-luw/install-db2/","text":"Install IBM DB2 LUW RDBMS Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu. Get the software Open Firefox and visit IBM DB2 Products page . Click on the \"Download IBM Db2 Software Community Edition\" link. You will need an IBM account to download the software. There is no cost to create an account and there is no cost to download and run the Db2 Community Edition. Enter all the information it needs. You might have to log back in with your new IBM ID or it may take you to the next page. You will be presented with some marketing stuff. Choose your options and press the Continue button. Since this will be installed on a Linux system, click the download link for \"Linux (x64)\". This will download the file \"v11.5.8_linuxx64_server_dec.tar.gz\". If you didn't change anything, the default location for downloads is \"~/Downloads\". This is okay. Prep for building the software Setup the directory structure People have different ways of setting up the structure in the home directory. When the OS was created, by default, the following directories were created: . \u251c\u2500\u2500 Desktop \u251c\u2500\u2500 Documents \u251c\u2500\u2500 Downloads \u251c\u2500\u2500 Music \u251c\u2500\u2500 Pictures \u251c\u2500\u2500 Public \u251c\u2500\u2500 Templates \u2514\u2500\u2500 Videos Add three more directories by opening the terminal window and enter: cd mkdir bin builds dev The bin and dev directories will be useful later but now we will focus on the builds directory. Extract the downloaded file Open the Files app and go to the Downloads folder. Double click on the v11.5.8_linuxx64_server_dec.tar.gz file. This will open the Archive Manager application. After a little while, within that, you will see \"server_dec\". Click on the \"Extract\" button in the upper left hand corner. A dialog box will open to select where to extract the file to. Extract the file to the ~/builds directory. When it is done, close the dialog box and close Archive Manager. Rename the directory In the terminal: cd cd builds to go to the builds directory. Make sure the server_dec directory is present with: ls Rename server_dec to ibm-db2 with: mv server_dec ibm-db2 Enter the ibm-db2 directory with: cd ibm-db2 Install additional software In the terminal, run the following commands to install additional software needed to run IBM DB2 LUW: sudo apt install build-essential sudo apt install libaio1 sudo dpkg --add-architecture i386 sudo apt install libstdc++6:i386 sudo apt install libpam0g:i386 sudo apt install ksh Checking Prerequisites Run: ./db2prereqcheck If you went with PopOS, this will fail with a message about \"couldn't recognize the distribution\". Don't worry, it will work. If you installed Ubuntu instead of PopOS, you will see a long list of information and at the bottom it will say that all requrements are met. Installing IBM DB2 LUW as a \"root\" or \"system\" install Run: sudo ./db2setup -f sysreq If you installed Ubuntu instead of PopOS, Run sudo ./db2setup This will open a small dialog window. Click on New Install Make sure DB2 Version 11.5.8.0 Server Edition is highlighted From what I have read, Purescale is not available on Ubuntu Click Next When you get to the window that has two buttons: Typical or Custom Select Custom. Check the box that you agree to the Licence Click Next When presented with the list of options: Within Application development tools: Check \"Base application development tools\" Go through the rest of the windows accepting the defaults until you see Instance Owner. The next two windows set the password for new userids: db2inst1 and db2fenc1 For the remaining windows, accept the defaults. When it finishes, look through the log file. All should look good except \"Installing TSAMP\". There is a warning for this. To be on the safe side, I rebooted after the install was finished. When it came back up, there were three users to select from on the login window. The \"normal\" userid (the one created when the OS was installed), and the db2inst1 and db2fenc1 userids. Log in with the \"normal\" userid and open a terminal window: cd /opt/ibm/db2/V11.5/ Check out the include and samples directories and make sure all the COBOL stuff is present.","title":"Install DB2 LUW"},{"location":"user-guides/install-db2-luw/install-db2/#install-ibm-db2-luw-rdbms","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu.","title":"Install IBM DB2 LUW RDBMS"},{"location":"user-guides/install-db2-luw/install-db2/#get-the-software","text":"Open Firefox and visit IBM DB2 Products page . Click on the \"Download IBM Db2 Software Community Edition\" link. You will need an IBM account to download the software. There is no cost to create an account and there is no cost to download and run the Db2 Community Edition. Enter all the information it needs. You might have to log back in with your new IBM ID or it may take you to the next page. You will be presented with some marketing stuff. Choose your options and press the Continue button. Since this will be installed on a Linux system, click the download link for \"Linux (x64)\". This will download the file \"v11.5.8_linuxx64_server_dec.tar.gz\". If you didn't change anything, the default location for downloads is \"~/Downloads\". This is okay.","title":"Get the software"},{"location":"user-guides/install-db2-luw/install-db2/#prep-for-building-the-software","text":"","title":"Prep for building the software"},{"location":"user-guides/install-db2-luw/install-db2/#setup-the-directory-structure","text":"People have different ways of setting up the structure in the home directory. When the OS was created, by default, the following directories were created: . \u251c\u2500\u2500 Desktop \u251c\u2500\u2500 Documents \u251c\u2500\u2500 Downloads \u251c\u2500\u2500 Music \u251c\u2500\u2500 Pictures \u251c\u2500\u2500 Public \u251c\u2500\u2500 Templates \u2514\u2500\u2500 Videos Add three more directories by opening the terminal window and enter: cd mkdir bin builds dev The bin and dev directories will be useful later but now we will focus on the builds directory.","title":"Setup the directory structure"},{"location":"user-guides/install-db2-luw/install-db2/#extract-the-downloaded-file","text":"Open the Files app and go to the Downloads folder. Double click on the v11.5.8_linuxx64_server_dec.tar.gz file. This will open the Archive Manager application. After a little while, within that, you will see \"server_dec\". Click on the \"Extract\" button in the upper left hand corner. A dialog box will open to select where to extract the file to. Extract the file to the ~/builds directory. When it is done, close the dialog box and close Archive Manager.","title":"Extract the downloaded file"},{"location":"user-guides/install-db2-luw/install-db2/#rename-the-directory","text":"In the terminal: cd cd builds to go to the builds directory. Make sure the server_dec directory is present with: ls Rename server_dec to ibm-db2 with: mv server_dec ibm-db2 Enter the ibm-db2 directory with: cd ibm-db2","title":"Rename the directory"},{"location":"user-guides/install-db2-luw/install-db2/#install-additional-software","text":"In the terminal, run the following commands to install additional software needed to run IBM DB2 LUW: sudo apt install build-essential sudo apt install libaio1 sudo dpkg --add-architecture i386 sudo apt install libstdc++6:i386 sudo apt install libpam0g:i386 sudo apt install ksh","title":"Install additional software"},{"location":"user-guides/install-db2-luw/install-db2/#checking-prerequisites","text":"Run: ./db2prereqcheck If you went with PopOS, this will fail with a message about \"couldn't recognize the distribution\". Don't worry, it will work. If you installed Ubuntu instead of PopOS, you will see a long list of information and at the bottom it will say that all requrements are met.","title":"Checking Prerequisites"},{"location":"user-guides/install-db2-luw/install-db2/#installing-ibm-db2-luw-as-a-root-or-system-install","text":"Run: sudo ./db2setup -f sysreq If you installed Ubuntu instead of PopOS, Run sudo ./db2setup This will open a small dialog window. Click on New Install Make sure DB2 Version 11.5.8.0 Server Edition is highlighted From what I have read, Purescale is not available on Ubuntu Click Next When you get to the window that has two buttons: Typical or Custom Select Custom. Check the box that you agree to the Licence Click Next When presented with the list of options: Within Application development tools: Check \"Base application development tools\" Go through the rest of the windows accepting the defaults until you see Instance Owner. The next two windows set the password for new userids: db2inst1 and db2fenc1 For the remaining windows, accept the defaults. When it finishes, look through the log file. All should look good except \"Installing TSAMP\". There is a warning for this. To be on the safe side, I rebooted after the install was finished. When it came back up, there were three users to select from on the login window. The \"normal\" userid (the one created when the OS was installed), and the db2inst1 and db2fenc1 userids. Log in with the \"normal\" userid and open a terminal window: cd /opt/ibm/db2/V11.5/ Check out the include and samples directories and make sure all the COBOL stuff is present.","title":"Installing IBM DB2 LUW as a \"root\" or \"system\" install"},{"location":"user-guides/install-db2-luw/install-gnucobol/","text":"Install GnuCOBOL Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu. Get GnuCOBOL Download the source code from GnuCOBOL As of March 1, 2023, the current version is 3.1.2. For that version, download: gnucobol-3.1.2.tar.xz. If you haven't made any changes, it will be downloaded to the Downloads directory. Extract into builds Open the Files application, double-click on gnucobol-3.1.2.tar.xz to extract it into the ~/builds directory. Install additional software Open a terminal window install the following: sudo apt install libgmp-dev sudo apt install libdb5.3-dev sudo apt install libncurses-dev sudo apt install libxml2-dev sudo apt install libcjson-dev Configure, Make and Install Run: cd builds/gnucobol-3.1.2 This will take you into the gnucobol-3.1.2 directory. Run: ./configure A whole bunch of messages will print on the screen At the end, there should be some messages that look like: extended screen I/O : ncursesw variable file format : 0 sequential file handler : built-in indexed file handler : BDB mathematical library : GMP XML library : libxml2 JSON library : json-c If there are no errors, Run: make More messages will display, if there are no errors, Run: sudo make install Then Run: sudo ldconfig As a quick test, Run: cobc You should get an error message: cobc: error: no input files For a better test of the install: 1. Create a new directory 2. Create a simple COBOL program 3. Run it. 1: Create a new directory For this test: mkdir -p ~/dev/cobol/test-cobol cd ~/dev/cobol/test-cobol touch hello.cbl 2: Create a simple COBOL program Open the Files application, go to dev/cobol/test-cobol folder. Double-click on hello.cbl. This will open it in the Text Editor application. Copy the following code and paste it into hello.cbl: IDENTIFICATION DIVISION. PROGRAM-ID. SmallestProgram. DATA DIVISION. FILE SECTION. WORKING-STORAGE SECTION. PROCEDURE DIVISION. MAIN-PROCEDURE. DISPLAY \"Hello world\" STOP RUN. END PROGRAM SmallestProgram. and save it. Go to the Terminal window and run: pwd To make sure you are in the ~/dev/cobol/test-cobol directory. Run: cobc -x hello.cbl If it complies correctly: ./hello It should return: Hello world","title":"Install GnuCOBOL"},{"location":"user-guides/install-db2-luw/install-gnucobol/#install-gnucobol","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu.","title":"Install GnuCOBOL"},{"location":"user-guides/install-db2-luw/install-gnucobol/#get-gnucobol","text":"Download the source code from GnuCOBOL As of March 1, 2023, the current version is 3.1.2. For that version, download: gnucobol-3.1.2.tar.xz. If you haven't made any changes, it will be downloaded to the Downloads directory.","title":"Get GnuCOBOL"},{"location":"user-guides/install-db2-luw/install-gnucobol/#extract-into-builds","text":"Open the Files application, double-click on gnucobol-3.1.2.tar.xz to extract it into the ~/builds directory.","title":"Extract into builds"},{"location":"user-guides/install-db2-luw/install-gnucobol/#install-additional-software","text":"Open a terminal window install the following: sudo apt install libgmp-dev sudo apt install libdb5.3-dev sudo apt install libncurses-dev sudo apt install libxml2-dev sudo apt install libcjson-dev","title":"Install additional software"},{"location":"user-guides/install-db2-luw/install-gnucobol/#configure-make-and-install","text":"Run: cd builds/gnucobol-3.1.2 This will take you into the gnucobol-3.1.2 directory. Run: ./configure A whole bunch of messages will print on the screen At the end, there should be some messages that look like: extended screen I/O : ncursesw variable file format : 0 sequential file handler : built-in indexed file handler : BDB mathematical library : GMP XML library : libxml2 JSON library : json-c If there are no errors, Run: make More messages will display, if there are no errors, Run: sudo make install Then Run: sudo ldconfig As a quick test, Run: cobc You should get an error message: cobc: error: no input files For a better test of the install: 1. Create a new directory 2. Create a simple COBOL program 3. Run it.","title":"Configure, Make and Install"},{"location":"user-guides/install-db2-luw/install-gnucobol/#1-create-a-new-directory","text":"For this test: mkdir -p ~/dev/cobol/test-cobol cd ~/dev/cobol/test-cobol touch hello.cbl","title":"1: Create a new directory"},{"location":"user-guides/install-db2-luw/install-gnucobol/#2-create-a-simple-cobol-program","text":"Open the Files application, go to dev/cobol/test-cobol folder. Double-click on hello.cbl. This will open it in the Text Editor application. Copy the following code and paste it into hello.cbl: IDENTIFICATION DIVISION. PROGRAM-ID. SmallestProgram. DATA DIVISION. FILE SECTION. WORKING-STORAGE SECTION. PROCEDURE DIVISION. MAIN-PROCEDURE. DISPLAY \"Hello world\" STOP RUN. END PROGRAM SmallestProgram. and save it. Go to the Terminal window and run: pwd To make sure you are in the ~/dev/cobol/test-cobol directory. Run: cobc -x hello.cbl If it complies correctly: ./hello It should return: Hello world","title":"2: Create a simple COBOL program"},{"location":"user-guides/install-db2-luw/install-sampledb/","text":"Install the Sample DB. Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu. Check the installation In the terminal window: su - db2inst1 ksh You will need to enter the password for db2inst1 after the su command. Use ksh for a \"more useable\" command line. A quick check: db2 list database directory returns no DBs. Install Sample DB cd sqllib/bin Run ./dbsampl to create the Sample DB. Not sure why but this takes a LLLLOOOONNNNGGGG time to complete. To check success: db2 list database directory This should return: System Database Directory Number of entries in the directory = 1 Database 1 entry: Database alias = SAMPLE Database name = SAMPLE Local database directory = /home/db2inst1 Database release level = 15.00 Comment = Directory entry type = Indirect Catalog database partition number = 0 Alternate server hostname = Alternate server port number = Now run: db2 This will take you inside DB2 and provide the DB2 prompt. Then run: connect to sample This will return: Database Connection Information Database server = DB2/LINUXX8664 11.5.8.0 SQL authorization ID = DB2INST1 Local database alias = SAMPLE Then run: select * from employee This will return a listing of 42 employees type: quit to exit DB2 and return to the command prompt. Type exit, to exit the ksh shell. Type exit again to exit db2inst1 and become the \"normal\" user again. Install db2profile in .bashrc As the \"normal\" user, you will need to run some DB2 commands in the terminal window. To make this possible, add the following 4 lines to the bottom of the .bashrc file which is found in home directory. # The following three lines have been added by UDB DB2. if [ -f /home/db2inst1/sqllib/db2profile ]; then . /home/db2inst1/sqllib/db2profile fi This will also export some very useful environment variables. You will need to exit and re-open the terminal window for them to be activated.","title":"Install Sample DB and db2profile"},{"location":"user-guides/install-db2-luw/install-sampledb/#install-the-sample-db","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!OS, they should be similar for Ubuntu.","title":"Install the Sample DB."},{"location":"user-guides/install-db2-luw/install-sampledb/#check-the-installation","text":"In the terminal window: su - db2inst1 ksh You will need to enter the password for db2inst1 after the su command. Use ksh for a \"more useable\" command line. A quick check: db2 list database directory returns no DBs.","title":"Check the installation"},{"location":"user-guides/install-db2-luw/install-sampledb/#install-sample-db","text":"cd sqllib/bin Run ./dbsampl to create the Sample DB. Not sure why but this takes a LLLLOOOONNNNGGGG time to complete. To check success: db2 list database directory This should return: System Database Directory Number of entries in the directory = 1 Database 1 entry: Database alias = SAMPLE Database name = SAMPLE Local database directory = /home/db2inst1 Database release level = 15.00 Comment = Directory entry type = Indirect Catalog database partition number = 0 Alternate server hostname = Alternate server port number = Now run: db2 This will take you inside DB2 and provide the DB2 prompt. Then run: connect to sample This will return: Database Connection Information Database server = DB2/LINUXX8664 11.5.8.0 SQL authorization ID = DB2INST1 Local database alias = SAMPLE Then run: select * from employee This will return a listing of 42 employees type: quit to exit DB2 and return to the command prompt. Type exit, to exit the ksh shell. Type exit again to exit db2inst1 and become the \"normal\" user again.","title":"Install Sample DB"},{"location":"user-guides/install-db2-luw/install-sampledb/#install-db2profile-in-bashrc","text":"As the \"normal\" user, you will need to run some DB2 commands in the terminal window. To make this possible, add the following 4 lines to the bottom of the .bashrc file which is found in home directory. # The following three lines have been added by UDB DB2. if [ -f /home/db2inst1/sqllib/db2profile ]; then . /home/db2inst1/sqllib/db2profile fi This will also export some very useful environment variables. You will need to exit and re-open the terminal window for them to be activated.","title":"Install db2profile in .bashrc"},{"location":"user-guides/install-db2-luw/install-vm/","text":"Install a Virtual Machine There are a number of virtualization products available to create a Virtual Machine on your computer: Oracle VM VirtualBox, VMWare, QEMU etc. You may already have one of these installed; if so, go to the next step. If not, pick one of them, and follow the installation instructions for your computer. I use QEMU now but in the past I have used VirtualBox and VMWare. They all work fairly well. Download the Operating System iso Install Pop!OS Go to the Pop!OS website press the \"Download\" button. I am using the Pop!OS 22.04 LTS version. Or use Ubuntu instead As I stated in the overview, Ubuntu is \"offically supported\" so if you want to use that instead: Go to the Ubuntu Desktop website and download the Ubuntu 22.04 LTS version. Three steps to create a VM. Create the VM Follow the instructions for the virtualization product you have installed on your computer to create a VM. Create the \"Harddrive\" that the OS will run on and how big the drive will be. Decide how much memory the VM will allocated. Other parameters required by the virtualization product. For this project, the parameters I used are: 100GB HD 4GB Ram Install the OS into the VM Follow the instructions for the virtualization product you have installed on your computer to actually install the OS onto the VM harddrive. A word of caution about the userid you create as you install the OS You create a userid when you install the OS and will probably use that userid to run db2 commands. Make sure your userid meets the criteria below: User IDs have the following restrictions and requirements: Must have a primary group other than guests, admins, users, and local. Can include lowercase letters (a-z), numbers (0-9), and the underscore character (_). Cannot be longer than eight characters Cannot begin with IBM, SYS, SQL, or a number. Cannot be a DB2 reserved word (USERS, ADMINS, GUESTS, PUBLIC, or LOCAL), or an SQL reserved word. Cannot use any user IDs with root privilege for the DB2 instance ID, DAS ID, or fenced ID. Cannot include accented characters. This threw me for awhile because I wanted to use \"sysop\" as the userid and the install kept failing. When done with this step, you usually need to shutdown the VM and then run it so it starts the new installed system and not the iso used to install the system. Run the VM and update Follow the instructions for the virtualization product you have installed on your computer to run the VM. A new window should display with a login screen. Login using the userid you setup when installing the OS. Open the Pop!_Shop application. Click on the \"Installed\" button in the titlebar and then click \"Update All\" in the window listing all the updates that can be done. To be \"safe\", after all the updates are done, reboot the system.","title":"Install VM"},{"location":"user-guides/install-db2-luw/install-vm/#install-a-virtual-machine","text":"There are a number of virtualization products available to create a Virtual Machine on your computer: Oracle VM VirtualBox, VMWare, QEMU etc. You may already have one of these installed; if so, go to the next step. If not, pick one of them, and follow the installation instructions for your computer. I use QEMU now but in the past I have used VirtualBox and VMWare. They all work fairly well.","title":"Install a Virtual Machine"},{"location":"user-guides/install-db2-luw/install-vm/#download-the-operating-system-iso","text":"","title":"Download the Operating System iso"},{"location":"user-guides/install-db2-luw/install-vm/#install-popos","text":"Go to the Pop!OS website press the \"Download\" button. I am using the Pop!OS 22.04 LTS version.","title":"Install Pop!OS"},{"location":"user-guides/install-db2-luw/install-vm/#or-use-ubuntu-instead","text":"As I stated in the overview, Ubuntu is \"offically supported\" so if you want to use that instead: Go to the Ubuntu Desktop website and download the Ubuntu 22.04 LTS version.","title":"Or use Ubuntu instead"},{"location":"user-guides/install-db2-luw/install-vm/#three-steps-to-create-a-vm","text":"","title":"Three steps to create a VM."},{"location":"user-guides/install-db2-luw/install-vm/#create-the-vm","text":"Follow the instructions for the virtualization product you have installed on your computer to create a VM. Create the \"Harddrive\" that the OS will run on and how big the drive will be. Decide how much memory the VM will allocated. Other parameters required by the virtualization product. For this project, the parameters I used are: 100GB HD 4GB Ram","title":"Create the VM"},{"location":"user-guides/install-db2-luw/install-vm/#install-the-os-into-the-vm","text":"Follow the instructions for the virtualization product you have installed on your computer to actually install the OS onto the VM harddrive.","title":"Install the OS into the VM"},{"location":"user-guides/install-db2-luw/install-vm/#a-word-of-caution-about-the-userid-you-create-as-you-install-the-os","text":"You create a userid when you install the OS and will probably use that userid to run db2 commands. Make sure your userid meets the criteria below: User IDs have the following restrictions and requirements: Must have a primary group other than guests, admins, users, and local. Can include lowercase letters (a-z), numbers (0-9), and the underscore character (_). Cannot be longer than eight characters Cannot begin with IBM, SYS, SQL, or a number. Cannot be a DB2 reserved word (USERS, ADMINS, GUESTS, PUBLIC, or LOCAL), or an SQL reserved word. Cannot use any user IDs with root privilege for the DB2 instance ID, DAS ID, or fenced ID. Cannot include accented characters. This threw me for awhile because I wanted to use \"sysop\" as the userid and the install kept failing. When done with this step, you usually need to shutdown the VM and then run it so it starts the new installed system and not the iso used to install the system.","title":"A word of caution about the userid you create as you install the OS"},{"location":"user-guides/install-db2-luw/install-vm/#run-the-vm-and-update","text":"Follow the instructions for the virtualization product you have installed on your computer to run the VM. A new window should display with a login screen. Login using the userid you setup when installing the OS. Open the Pop!_Shop application. Click on the \"Installed\" button in the titlebar and then click \"Update All\" in the window listing all the updates that can be done. To be \"safe\", after all the updates are done, reboot the system.","title":"Run the VM and update"},{"location":"user-guides/install-db2-luw/overview/","text":"Overview Let me be blunt. This is not the \"best\" way and it might not be a \"good\" way. It may even be a \"bad\" way and I'm sure that some people will look at this and say: \"Why did you do it \"that\" way?\" But, it does run and it does work. If you have the desire to be able to write COBOL program with embedded SQL statements that access an IBM DB2 LUW RDBMS in a Linux environment... This is \"a\" way. Why this way you ask? I run an Archlinux(ArcoLinux to be precise) system. I can create, compile and run GnuCOBOL programs on that system that run just fine. I haven't installed DB2 on that system, nor do I want to. I have downloaded the Docker DB2 image and can run it but there are problems which I haven't solved yet which prevent me from using that. Lazy of me? Maybe My goal was to learn how to create, compile and run COBOL/DB2 program in a Linux environment. I had a choice of which path to I want to go down first: Fix the problems with Docker or create an Ubuntu VM. I chose the \"Create a VM\" path. IBM DB2 LUW Installation Environment According to the documentation, the only supported Linux environments are RedHat and Ubuntu. Personally, I like the UI for PopOS (by System 76) better and it is based on Ubuntu so I am using that. All the commands work on Ubuntu as well so if you want to use that instead, go for it. You will need to do five things: Create a VM Install IBM DB2 LUW Create the Sample DB Install GnuCOBOL Install a Basic Develoment Environment Can I do this in Windows WSL? You may be asking, \"Windows has the WSL that can install an Ubuntu distribution, can I do this within that?\" I have no idea. I have never used WSL so I don't know what it can or cannot do. I do have a Windows 10 system and I have installed IBM DB2 LUW on that, but I use MingGW for DB2 programs and Cygwin for batch programs. Do a search on the GnuCOBOL discussion board for instructions on how to set that up if you want to go that route.","title":"Overview"},{"location":"user-guides/install-db2-luw/overview/#overview","text":"Let me be blunt. This is not the \"best\" way and it might not be a \"good\" way. It may even be a \"bad\" way and I'm sure that some people will look at this and say: \"Why did you do it \"that\" way?\" But, it does run and it does work. If you have the desire to be able to write COBOL program with embedded SQL statements that access an IBM DB2 LUW RDBMS in a Linux environment... This is \"a\" way. Why this way you ask? I run an Archlinux(ArcoLinux to be precise) system. I can create, compile and run GnuCOBOL programs on that system that run just fine. I haven't installed DB2 on that system, nor do I want to. I have downloaded the Docker DB2 image and can run it but there are problems which I haven't solved yet which prevent me from using that. Lazy of me? Maybe My goal was to learn how to create, compile and run COBOL/DB2 program in a Linux environment. I had a choice of which path to I want to go down first: Fix the problems with Docker or create an Ubuntu VM. I chose the \"Create a VM\" path.","title":"Overview"},{"location":"user-guides/install-db2-luw/overview/#ibm-db2-luw-installation-environment","text":"According to the documentation, the only supported Linux environments are RedHat and Ubuntu. Personally, I like the UI for PopOS (by System 76) better and it is based on Ubuntu so I am using that. All the commands work on Ubuntu as well so if you want to use that instead, go for it. You will need to do five things: Create a VM Install IBM DB2 LUW Create the Sample DB Install GnuCOBOL Install a Basic Develoment Environment","title":"IBM DB2 LUW Installation Environment"},{"location":"user-guides/install-db2-luw/overview/#can-i-do-this-in-windows-wsl","text":"You may be asking, \"Windows has the WSL that can install an Ubuntu distribution, can I do this within that?\" I have no idea. I have never used WSL so I don't know what it can or cannot do. I do have a Windows 10 system and I have installed IBM DB2 LUW on that, but I use MingGW for DB2 programs and Cygwin for batch programs. Do a search on the GnuCOBOL discussion board for instructions on how to set that up if you want to go that route.","title":"Can I do this in Windows WSL?"}]}