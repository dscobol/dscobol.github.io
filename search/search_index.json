{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to dscobol This is a site that provides code examples for COBOL.","title":"Home"},{"location":"#welcome-to-dscobol","text":"This is a site that provides code examples for COBOL.","title":"Welcome to dscobol"},{"location":"about/","text":"About dscobol What is in this repository, and why are they named the way they are. What is here There are multiple repositories which cover a range of topics and technologies. GnuCOBOL - Gnu/Linux (Pop!_OS) - COBOL accessing Text files, Indexed data files, DB2, and Postgresql. ZOS - IBM z/OS - COBOL and JCL accessing QSAM, VSAM, DB2, and maybe CICS MVS - TK4- Mainframe emulator - COBOL and KICKS Zowe Framework (A modern interface to interact with z/OS) - COBOL and JCL accessing QSAM, VSAM, and maybe DB2 Within the repositories: COBOL is the primary programming language For programs that run on Gnu/Linux: Bash is the primary scripting language Note: While all these programs have been run using a Pop!_OS VM, GnuCOBOL is not limited to that OS. Using an OS with an Ubuntu base was needed to run IBM DB2 LUW on a Gnu/Linux OS. See the GnuCOBOL site for more information about it's capabilities. For programs that run on ZOS or MVS: JCL is the, well, Job Control Language For Zowe: It is a combination of bash scripts and JCL. Naming Convention The ideas or concepts for the programs may have originated somewhere else(books, tutorials, other websites, etc.) but I try to \"make it my own\" by rewriting it using a different structure and style. First designation dsc - The code was written by dscobol(aka: me) ibm - Code from books, documentation or instruction from IBM. gem - Curtis Garvin, Steve Eckols. DB2 for the COBOL Programmer, Part 1 and 2 . Murach 1991. mca - Michael Coughlan. Beginning COBOL for Programmers Apress 2014. xxx - Code from a website, blog or other source. This will be changed to reflect the source. Second designation gnu - GnuCOBOL zos - IBM Enterprise COBOL mvs - MVS COBOL zow - Zowe Framework Third and further designation A description of the focus of the programs. Examples: dsc-gnu-Indexed dsc - programs by dscobol. gnu - uses the GnuCOBOL compiler Indexed - programs that read and write to Indexed files. gem-gnu-DB2 gem - programs from the \"DB2 for the COBOL Programmer\" book gnu - uses the GnuCOBOL compiler DB2 - connects to the IBM DB2 RDBMS","title":"About"},{"location":"about/#about-dscobol","text":"","title":"About dscobol"},{"location":"about/#what-is-in-this-repository-and-why-are-they-named-the-way-they-are","text":"","title":"What is in this repository, and why are they named the way they are."},{"location":"about/#what-is-here","text":"There are multiple repositories which cover a range of topics and technologies. GnuCOBOL - Gnu/Linux (Pop!_OS) - COBOL accessing Text files, Indexed data files, DB2, and Postgresql. ZOS - IBM z/OS - COBOL and JCL accessing QSAM, VSAM, DB2, and maybe CICS MVS - TK4- Mainframe emulator - COBOL and KICKS Zowe Framework (A modern interface to interact with z/OS) - COBOL and JCL accessing QSAM, VSAM, and maybe DB2 Within the repositories: COBOL is the primary programming language For programs that run on Gnu/Linux: Bash is the primary scripting language Note: While all these programs have been run using a Pop!_OS VM, GnuCOBOL is not limited to that OS. Using an OS with an Ubuntu base was needed to run IBM DB2 LUW on a Gnu/Linux OS. See the GnuCOBOL site for more information about it's capabilities. For programs that run on ZOS or MVS: JCL is the, well, Job Control Language For Zowe: It is a combination of bash scripts and JCL.","title":"What is here"},{"location":"about/#naming-convention","text":"The ideas or concepts for the programs may have originated somewhere else(books, tutorials, other websites, etc.) but I try to \"make it my own\" by rewriting it using a different structure and style.","title":"Naming Convention"},{"location":"about/#first-designation","text":"dsc - The code was written by dscobol(aka: me) ibm - Code from books, documentation or instruction from IBM. gem - Curtis Garvin, Steve Eckols. DB2 for the COBOL Programmer, Part 1 and 2 . Murach 1991. mca - Michael Coughlan. Beginning COBOL for Programmers Apress 2014. xxx - Code from a website, blog or other source. This will be changed to reflect the source.","title":"First designation"},{"location":"about/#second-designation","text":"gnu - GnuCOBOL zos - IBM Enterprise COBOL mvs - MVS COBOL zow - Zowe Framework","title":"Second designation"},{"location":"about/#third-and-further-designation","text":"A description of the focus of the programs.","title":"Third and further designation"},{"location":"about/#examples","text":"dsc-gnu-Indexed dsc - programs by dscobol. gnu - uses the GnuCOBOL compiler Indexed - programs that read and write to Indexed files. gem-gnu-DB2 gem - programs from the \"DB2 for the COBOL Programmer\" book gnu - uses the GnuCOBOL compiler DB2 - connects to the IBM DB2 RDBMS","title":"Examples:"},{"location":"guides/create-db2-db/create-db2-db/","text":"Create a new DB2 database Become Instance Owner During the install of IBM DB2 LUW, if you accepted the defaults, the Instance Owner's userid is \"db2inst1\". If you changed that, use that userid instead. To create new databases, you have to become the Instance Owner and get into the DB2 system. Run: su - db2inst1 Enter the password. This will make you \"db2inst1\" and display a very bare prompt Run: ksh to get a more useable environment. Run: db2 This gets you \"into the DB2 system\". Create a new database and call it MURACH. Because there are tables used in Murach books that have the same names as the Sample DB, create the MURACH DB. Follow the instructions above to \"get into the db2 system\", then: At the db2> prompt, Run CREATE DATABASE MURACH You might wait a very long time but it should come back with \"successfully created database\" Create a new database and call it BOOKS. Create the BOOKS DB. Follow the instructions above to \"get into the db2 system\", then: At the db2> prompt, Run CREATE DATABASE BOOKS You might wait a very long time but it should come back with \"successfully created database\"","title":"Create a DB2 DB"},{"location":"guides/create-db2-db/create-db2-db/#create-a-new-db2-database","text":"","title":"Create a new DB2 database"},{"location":"guides/create-db2-db/create-db2-db/#become-instance-owner","text":"During the install of IBM DB2 LUW, if you accepted the defaults, the Instance Owner's userid is \"db2inst1\". If you changed that, use that userid instead. To create new databases, you have to become the Instance Owner and get into the DB2 system. Run: su - db2inst1 Enter the password. This will make you \"db2inst1\" and display a very bare prompt Run: ksh to get a more useable environment. Run: db2 This gets you \"into the DB2 system\".","title":"Become Instance Owner"},{"location":"guides/create-db2-db/create-db2-db/#create-a-new-database-and-call-it-murach","text":"Because there are tables used in Murach books that have the same names as the Sample DB, create the MURACH DB. Follow the instructions above to \"get into the db2 system\", then: At the db2> prompt, Run CREATE DATABASE MURACH You might wait a very long time but it should come back with \"successfully created database\"","title":"Create a new database and call it MURACH."},{"location":"guides/create-db2-db/create-db2-db/#create-a-new-database-and-call-it-books","text":"Create the BOOKS DB. Follow the instructions above to \"get into the db2 system\", then: At the db2> prompt, Run CREATE DATABASE BOOKS You might wait a very long time but it should come back with \"successfully created database\"","title":"Create a new database and call it BOOKS."},{"location":"guides/gnu-vs-zos-cobol/overview-gnu-vs-zos-cobol/","text":"Overview GnuCOBOL vs ZOS COBOL To be written","title":"Overview of the differences"},{"location":"guides/gnu-vs-zos-cobol/overview-gnu-vs-zos-cobol/#overview-gnucobol-vs-zos-cobol","text":"To be written","title":"Overview GnuCOBOL vs ZOS COBOL"},{"location":"guides/gnu-vs-zos-cobol/batch/normal-batch-gnu-cobol/","text":"normal-batch-gnu-cobol To be written","title":"A normal GnuCOBOL batch pgm"},{"location":"guides/gnu-vs-zos-cobol/batch/normal-batch-gnu-cobol/#normal-batch-gnu-cobol","text":"To be written","title":"normal-batch-gnu-cobol"},{"location":"guides/gnu-vs-zos-cobol/batch/normal-batch-zos-cobol/","text":"normal-batch-zos-cobol To be written","title":"A normal ZOS COBOL batch pgm"},{"location":"guides/gnu-vs-zos-cobol/batch/normal-batch-zos-cobol/#normal-batch-zos-cobol","text":"To be written","title":"normal-batch-zos-cobol"},{"location":"guides/gnu-vs-zos-cobol/batch/overview-batch-zos-vs-gnu-cobol/","text":"overview-batch-zos-vs-gnu To be written","title":"Overview"},{"location":"guides/gnu-vs-zos-cobol/batch/overview-batch-zos-vs-gnu-cobol/#overview-batch-zos-vs-gnu","text":"To be written","title":"overview-batch-zos-vs-gnu"},{"location":"guides/gnu-vs-zos-cobol/db2/converted-to-gnu-db2-cobol/","text":"An example of a converted from ZOS/DB2 to GnuCOBOL/DB2 program This is the Murach CUSTINQ program with just enough code added to make it work with GnuCOBOL and IBM DB2 LUW. Breakdown of Changes program. IDENTIFICATION DIVISION. * PROGRAM-ID. CUSTINQ. * ENVIRONMENT DIVISION. * INPUT-OUTPUT SECTION. * FILE-CONTROL. * DATA DIVISION. * FILE SECTION. * WORKING-STORAGE SECTION. * 01 SWITCHES. * 05 END-OF-INQUIRIES-SW PIC X VALUE 'N'. 88 END-OF-INQUIRIES VALUE 'Y'. 05 CUSTOMER-FOUND-SW PIC X. 88 CUSTOMER-FOUND VALUE 'Y'. EXEC SQL INCLUDE SQLCA END-EXEC. * ***** Convert to GnuCOBOL ***** Start of Step 1 * No DCLGEN member to INCLUDE * Comment this INCLUDE out * EXEC SQL * INCLUDE CUSTOMER * END-EXEC. * * Add DECLARE TABLE EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. * Add DECLARE SECTION EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 Customer-Row. 12 CUSTNO PIC X(06). 12 FNAME PIC X(20). 12 LNAME PIC X(30). 12 ADDR PIC X(30). 12 CITY PIC X(20). 12 STATE PIC X(02). 12 ZIPCODE PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. * Add status check for connection info. 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. ***** End of Step 1 PROCEDURE DIVISION. * 000-DISPLAY-CUSTOMER-ROWS. * Step 2 * Add Paragraph to connect to the DB PERFORM 9800-Connect-to-DB1. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. * 100-DISPLAY-CUSTOMER-ROW. * PERFORM 110-ACCEPT-CUSTOMER-NUMBER. IF NOT END-OF-INQUIRIES MOVE 'Y' TO CUSTOMER-FOUND-SW PERFORM 120-GET-CUSTOMER-ROW IF CUSTOMER-FOUND PERFORM 130-DISPLAY-CUSTOMER-LINES ELSE PERFORM 140-DISPLAY-ERROR-LINES. * 110-ACCEPT-CUSTOMER-NUMBER. * DISPLAY '------------------------------------------------'. DISPLAY 'KEY IN THE NEXT CUSTOMER NUMBER AND PRESS ENTER,'. DISPLAY 'OR KEY IN 999999 AND PRESS ENTER TO QUIT.'. ACCEPT CUSTNO. IF CUSTNO = '999999' MOVE 'Y' TO END-OF-INQUIRIES-SW. * 120-GET-CUSTOMER-ROW. * EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :CUSTNO, :FNAME, :LNAME, :ADDR, :CITY, :STATE, :ZIPCODE FROM CUSTOMERS WHERE CUSTNO = :CUSTNO END-EXEC. * IF SQLCODE NOT = 0 MOVE 'N' TO CUSTOMER-FOUND-SW. * 130-DISPLAY-CUSTOMER-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER ' CUSTNO. DISPLAY ' NAME ' FNAME ' ' LNAME. DISPLAY ' ADDRESS ' ADDR. DISPLAY ' ' CITY ' ' STATE ' ' ZIPCODE. * 140-DISPLAY-ERROR-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER NUMBER ' CUSTNO ' NOT FOUND.'. * * Step 2 - the actual connection. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"CUSTINQ: userid and/or password invalid\" DISPLAY \"CUSTINQ: Can not connect, exiting\" GOBACK END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS.","title":"A converted to GnuCOBOL pgm"},{"location":"guides/gnu-vs-zos-cobol/db2/converted-to-gnu-db2-cobol/#an-example-of-a-converted-from-zosdb2-to-gnucoboldb2-program","text":"","title":"An example of a converted from ZOS/DB2 to GnuCOBOL/DB2 program"},{"location":"guides/gnu-vs-zos-cobol/db2/converted-to-gnu-db2-cobol/#this-is-the-murach-custinq-program-with-just-enough-code-added-to-make-it-work-with-gnucobol-and-ibm-db2-luw","text":"Breakdown of Changes program. IDENTIFICATION DIVISION. * PROGRAM-ID. CUSTINQ. * ENVIRONMENT DIVISION. * INPUT-OUTPUT SECTION. * FILE-CONTROL. * DATA DIVISION. * FILE SECTION. * WORKING-STORAGE SECTION. * 01 SWITCHES. * 05 END-OF-INQUIRIES-SW PIC X VALUE 'N'. 88 END-OF-INQUIRIES VALUE 'Y'. 05 CUSTOMER-FOUND-SW PIC X. 88 CUSTOMER-FOUND VALUE 'Y'. EXEC SQL INCLUDE SQLCA END-EXEC. * ***** Convert to GnuCOBOL ***** Start of Step 1 * No DCLGEN member to INCLUDE * Comment this INCLUDE out * EXEC SQL * INCLUDE CUSTOMER * END-EXEC. * * Add DECLARE TABLE EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. * Add DECLARE SECTION EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 Customer-Row. 12 CUSTNO PIC X(06). 12 FNAME PIC X(20). 12 LNAME PIC X(30). 12 ADDR PIC X(30). 12 CITY PIC X(20). 12 STATE PIC X(02). 12 ZIPCODE PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. * Add status check for connection info. 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. ***** End of Step 1 PROCEDURE DIVISION. * 000-DISPLAY-CUSTOMER-ROWS. * Step 2 * Add Paragraph to connect to the DB PERFORM 9800-Connect-to-DB1. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. * 100-DISPLAY-CUSTOMER-ROW. * PERFORM 110-ACCEPT-CUSTOMER-NUMBER. IF NOT END-OF-INQUIRIES MOVE 'Y' TO CUSTOMER-FOUND-SW PERFORM 120-GET-CUSTOMER-ROW IF CUSTOMER-FOUND PERFORM 130-DISPLAY-CUSTOMER-LINES ELSE PERFORM 140-DISPLAY-ERROR-LINES. * 110-ACCEPT-CUSTOMER-NUMBER. * DISPLAY '------------------------------------------------'. DISPLAY 'KEY IN THE NEXT CUSTOMER NUMBER AND PRESS ENTER,'. DISPLAY 'OR KEY IN 999999 AND PRESS ENTER TO QUIT.'. ACCEPT CUSTNO. IF CUSTNO = '999999' MOVE 'Y' TO END-OF-INQUIRIES-SW. * 120-GET-CUSTOMER-ROW. * EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :CUSTNO, :FNAME, :LNAME, :ADDR, :CITY, :STATE, :ZIPCODE FROM CUSTOMERS WHERE CUSTNO = :CUSTNO END-EXEC. * IF SQLCODE NOT = 0 MOVE 'N' TO CUSTOMER-FOUND-SW. * 130-DISPLAY-CUSTOMER-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER ' CUSTNO. DISPLAY ' NAME ' FNAME ' ' LNAME. DISPLAY ' ADDRESS ' ADDR. DISPLAY ' ' CITY ' ' STATE ' ' ZIPCODE. * 140-DISPLAY-ERROR-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER NUMBER ' CUSTNO ' NOT FOUND.'. * * Step 2 - the actual connection. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"CUSTINQ: userid and/or password invalid\" DISPLAY \"CUSTINQ: Can not connect, exiting\" GOBACK END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS.","title":"This is the Murach CUSTINQ program with just enough code added to make it work with GnuCOBOL and IBM DB2 LUW."},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/","text":"An example of an enhanced DB2 GnuCOBOL program using GETDBID. Code: GETDBID.cbl This is a simple COBOL pgm that can be called by GnuCOBOL programs. It has the userid and password embedded within it. Calling this bypasses the ACCEPT of the userid and password. Copy the text to tcbl/GETDBID.cbl Change the userid and password to the ones on your system. NOTE: Just replace the text, make sure the ' surrounding the text is present. ********************************************************** * Program name: GETDBID * Original author: David Stagowski * * Description: This is a called module to supply the * the userid and password for the database. * This was written because I got tired of typing them in * everytime I ran the program. * * Maintenence Log * Date Author Maintenance Requirement * --------- ------------ ------------------------------- * 2020-08-18 dastagg * * ********************************************************** IDENTIFICATION DIVISION. PROGRAM-ID. GETDBID. DATA DIVISION. WORKING-STORAGE SECTION. LINKAGE SECTION. 01 DB-User-ID PIC X(10). 01 DB-Passwd-Name PIC X(18). PROCEDURE DIVISION USING DB-User-ID, DB-Passwd-Name. MOVE 'userid' TO DB-User-ID. MOVE 'password' TO DB-Passwd-Name. GOBACK. Change to CUSTINQ Then replace this code: 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. With this code: 9811-Get-Credentials. CALL 'GETDBID' USING DB-User-ID, DB-Passwd-Name. Change to Compile script In order to use this, the Compile script has to be changed to add this to the compile step. Previous version: #!/bin/bash # Program parms PGM=CUSTINQ # DB2 Load Libraries export LOADLIB=\"$DB2_HOME/lib64\" # COBOL and SQL Copy Libraries export COBCOPY=\"../cpy\" export SQLCOPY=\"$DB2_HOME/include/cobol_mf\" # Clean up rm ../cbl/$PGM.bnd rm ../tcbl/$PGM.cbl rm ../bin/$PGM # DB2 Prep and Bind db2 -tvf ../sql/$PGM.sql read -p \"Press any key to resume\" # Compile cobc -std=default -x -o ../bin/$PGM ../tcbl/$PGM.cbl \\ -static \\ -I $SQLCOPY \\ -I $COBCOPY \\ -L $LOADLIB \\ -l db2 \\ -Wall \\ -O # Check return code if [ \"$?\" -eq 0 ]; then echo \"Complier Return code was ZERO.\" else echo \"Complier Return code not ZERO.\" fi New version #!/bin/bash # Program parms RPGM=CUSTINQ PGM=CUSTINQ LLM=GETDBID # DB2 Load Libraries export LOADLIB=\"$DB2_HOME/lib64\" # COBOL and SQL Copy Libraries export COBCOPY=\"../cpy\" export SQLCOPY=\"$DB2_HOME/include/cobol_mf\" # Clean up rm ../cbl/$PGM.bnd rm ../tcbl/$PGM.cbl rm ../bin/$RPGM # DB2 Prep and Bind db2 -tvf ../sql/$PGM.sql read -p \"Press any key to resume\" # Compile cobc -std=default -x -o ../bin/$RPGM ../tcbl/$PGM.cbl ../tcbl/$LLM.cbl \\ -static \\ -I $SQLCOPY \\ -I $COBCOPY \\ -L $LOADLIB \\ -l db2 \\ -Wall \\ -O # Check return code if [ \"$?\" -eq 0 ]; then echo \"Complier Return code was ZERO.\" else echo \"Complier Return code not ZERO.\" fi","title":"An enhanced GnuCOBOL pgm"},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#an-example-of-an-enhanced-db2-gnucobol-program-using-getdbid","text":"","title":"An example of an enhanced DB2 GnuCOBOL program using GETDBID."},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#code-getdbidcbl","text":"This is a simple COBOL pgm that can be called by GnuCOBOL programs. It has the userid and password embedded within it. Calling this bypasses the ACCEPT of the userid and password. Copy the text to tcbl/GETDBID.cbl Change the userid and password to the ones on your system. NOTE: Just replace the text, make sure the ' surrounding the text is present. ********************************************************** * Program name: GETDBID * Original author: David Stagowski * * Description: This is a called module to supply the * the userid and password for the database. * This was written because I got tired of typing them in * everytime I ran the program. * * Maintenence Log * Date Author Maintenance Requirement * --------- ------------ ------------------------------- * 2020-08-18 dastagg * * ********************************************************** IDENTIFICATION DIVISION. PROGRAM-ID. GETDBID. DATA DIVISION. WORKING-STORAGE SECTION. LINKAGE SECTION. 01 DB-User-ID PIC X(10). 01 DB-Passwd-Name PIC X(18). PROCEDURE DIVISION USING DB-User-ID, DB-Passwd-Name. MOVE 'userid' TO DB-User-ID. MOVE 'password' TO DB-Passwd-Name. GOBACK.","title":"Code: GETDBID.cbl"},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#change-to-custinq","text":"Then replace this code: 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. With this code: 9811-Get-Credentials. CALL 'GETDBID' USING DB-User-ID, DB-Passwd-Name.","title":"Change to CUSTINQ"},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#change-to-compile-script","text":"In order to use this, the Compile script has to be changed to add this to the compile step.","title":"Change to Compile script"},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#previous-version","text":"#!/bin/bash # Program parms PGM=CUSTINQ # DB2 Load Libraries export LOADLIB=\"$DB2_HOME/lib64\" # COBOL and SQL Copy Libraries export COBCOPY=\"../cpy\" export SQLCOPY=\"$DB2_HOME/include/cobol_mf\" # Clean up rm ../cbl/$PGM.bnd rm ../tcbl/$PGM.cbl rm ../bin/$PGM # DB2 Prep and Bind db2 -tvf ../sql/$PGM.sql read -p \"Press any key to resume\" # Compile cobc -std=default -x -o ../bin/$PGM ../tcbl/$PGM.cbl \\ -static \\ -I $SQLCOPY \\ -I $COBCOPY \\ -L $LOADLIB \\ -l db2 \\ -Wall \\ -O # Check return code if [ \"$?\" -eq 0 ]; then echo \"Complier Return code was ZERO.\" else echo \"Complier Return code not ZERO.\" fi","title":"Previous version:"},{"location":"guides/gnu-vs-zos-cobol/db2/enhanced-db2-gnu-cobol/#new-version","text":"#!/bin/bash # Program parms RPGM=CUSTINQ PGM=CUSTINQ LLM=GETDBID # DB2 Load Libraries export LOADLIB=\"$DB2_HOME/lib64\" # COBOL and SQL Copy Libraries export COBCOPY=\"../cpy\" export SQLCOPY=\"$DB2_HOME/include/cobol_mf\" # Clean up rm ../cbl/$PGM.bnd rm ../tcbl/$PGM.cbl rm ../bin/$RPGM # DB2 Prep and Bind db2 -tvf ../sql/$PGM.sql read -p \"Press any key to resume\" # Compile cobc -std=default -x -o ../bin/$RPGM ../tcbl/$PGM.cbl ../tcbl/$LLM.cbl \\ -static \\ -I $SQLCOPY \\ -I $COBCOPY \\ -L $LOADLIB \\ -l db2 \\ -Wall \\ -O # Check return code if [ \"$?\" -eq 0 ]; then echo \"Complier Return code was ZERO.\" else echo \"Complier Return code not ZERO.\" fi","title":"New version"},{"location":"guides/gnu-vs-zos-cobol/db2/my-version-of-custinq/","text":"My version of CUSTINQ From the user's perspective, the result is the same. It is only the structure of the program that is different. The program. ********************************************************** * Program name: CUSTINQ * Original author: David Stagowski * * Description: Query the Customer table. * * Maintenance Log * Date Author Maintenance Requirement * ---------- ------------ -------------------------------- * 2020-09-03 dastagg Created to learn. * 20XX-XX-XX If you change me, change this. * ********************************************************** IDENTIFICATION DIVISION. PROGRAM-ID. CUSTINQ. ENVIRONMENT DIVISION. CONFIGURATION SECTION. * SOURCE-COMPUTER. IBM WITH DEBUGGING MODE. DATA DIVISION. WORKING-STORAGE SECTION. EXEC SQL INCLUDE SQLCA END-EXEC. EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 HV-Customer-Row. 12 HV-Cust-Number PIC X(06). 12 HV-Cust-First-Name PIC X(20). 12 HV-Cust-Last-Name PIC X(30). 12 HV-Cust-Address PIC X(30). 12 HV-Cust-City PIC X(20). 12 HV-Cust-State PIC X(02). 12 HV-Cust-ZipCode PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. ******************* 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. 01 WS-Application-Flags. 12 WS-Inquiry-Flag PIC X. 88 WS-Keep-Looking VALUE 'Y'. 88 WS-Stop-Looking VALUE 'N'. 12 WS-Find-Customer-Flag PIC X. 88 WS-Customer-Found VALUE 'Y'. 88 WS-Customer-Not-Found VALUE 'N'. 01 WS-Called-Programs. 12 WS-GetDBId PIC X(8) VALUE SPACES. 01 EOJ-Display-Messages. 12 EOJ-End-Message PIC X(042) VALUE \"*** Program CUSTINQ - End of Run Messages\". PROCEDURE DIVISION. 0000-Mainline. PERFORM 1000-Begin-Job. PERFORM 2000-Process. PERFORM 3000-End-Job. GOBACK. 1000-Begin-Job. PERFORM 9800-Connect-to-DB1. IF SQL-STATUS-OK SET WS-Keep-Looking TO TRUE END-IF. 2000-Process. PERFORM 2100-Display-Customer UNTIL WS-Stop-Looking. 2100-Display-Customer. PERFORM 2110-Accept-Customer-Number. IF WS-Keep-Looking PERFORM 2120-Get-Customer-Row IF WS-Customer-Found PERFORM 2130-Display-Customer-Lines ELSE PERFORM 2140-Display-Error-Lines END-IF END-IF. 2110-Accept-Customer-Number. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY 'Key in the next Customer Number and press Enter,'. DISPLAY 'or key in 999999 and press Enter to quit.'. ACCEPT HV-Cust-Number. IF HV-Cust-Number = '999999' SET WS-Stop-Looking TO TRUE END-IF. 2120-Get-Customer-Row. PERFORM 5000-Read-DB1. 2130-Display-Customer-Lines. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY ' Customer: ' HV-Cust-Number. DISPLAY ' Name: ' FUNCTION TRIM(HV-Cust-First-Name), SPACE, FUNCTION TRIM(HV-Cust-Last-Name). DISPLAY ' Address: ' FUNCTION TRIM(HV-Cust-Address). DISPLAY ' ' FUNCTION TRIM(HV-Cust-City), SPACE, HV-Cust-State, SPACE, HV-Cust-ZipCode. DISPLAY '-------------------------------------------------'. 2140-Display-Error-Lines. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY ' Customer: ' HV-Cust-Number ' was not found.'. 3000-End-Job. EXEC SQL CONNECT RESET END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. 5000-Read-DB1. EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :HV-Cust-Number, :HV-Cust-First-Name, :HV-Cust-Last-Name, :HV-Cust-Address, :HV-Cust-City, :HV-Cust-State, :HV-Cust-ZipCode FROM CUSTOMERS WHERE CUSTNO = :HV-Cust-Number END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. IF SQL-STATUS-OK SET WS-Customer-Found TO TRUE ELSE IF SQL-STATUS-NOT-FOUND SET WS-Customer-Not-Found TO TRUE ELSE DISPLAY \"*** WARNING ***\" DISPLAY \"There was a problem Fetching the cursor.\" DISPLAY \"SQLCODE = \" SQLCODE PERFORM 3000-End-Job MOVE 8 TO RETURN-CODE GOBACK END-IF END-IF. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. MOVE 'GETDBID' TO WS-GetDBId CALL WS-GetDBId USING DB-User-ID, DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK PERFORM 9816-Create-Cursor-DB1 IF SQL-STATUS-OK PERFORM 9818-Open-Cursor-DB1 END-IF END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. 9816-Create-Cursor-DB1. * Parms for DB1-C1 *D DISPLAY \"Nothing to do here.\". * As an example: * MOVE \"DESIGNER\" TO HV-Job-Title. 9818-Open-Cursor-DB1. * This would be where you open a cursor. * Not needed for this program.","title":"My version of CUSTINQ"},{"location":"guides/gnu-vs-zos-cobol/db2/my-version-of-custinq/#my-version-of-custinq","text":"From the user's perspective, the result is the same. It is only the structure of the program that is different.","title":"My version of CUSTINQ"},{"location":"guides/gnu-vs-zos-cobol/db2/my-version-of-custinq/#the-program","text":"********************************************************** * Program name: CUSTINQ * Original author: David Stagowski * * Description: Query the Customer table. * * Maintenance Log * Date Author Maintenance Requirement * ---------- ------------ -------------------------------- * 2020-09-03 dastagg Created to learn. * 20XX-XX-XX If you change me, change this. * ********************************************************** IDENTIFICATION DIVISION. PROGRAM-ID. CUSTINQ. ENVIRONMENT DIVISION. CONFIGURATION SECTION. * SOURCE-COMPUTER. IBM WITH DEBUGGING MODE. DATA DIVISION. WORKING-STORAGE SECTION. EXEC SQL INCLUDE SQLCA END-EXEC. EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 HV-Customer-Row. 12 HV-Cust-Number PIC X(06). 12 HV-Cust-First-Name PIC X(20). 12 HV-Cust-Last-Name PIC X(30). 12 HV-Cust-Address PIC X(30). 12 HV-Cust-City PIC X(20). 12 HV-Cust-State PIC X(02). 12 HV-Cust-ZipCode PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. ******************* 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. 01 WS-Application-Flags. 12 WS-Inquiry-Flag PIC X. 88 WS-Keep-Looking VALUE 'Y'. 88 WS-Stop-Looking VALUE 'N'. 12 WS-Find-Customer-Flag PIC X. 88 WS-Customer-Found VALUE 'Y'. 88 WS-Customer-Not-Found VALUE 'N'. 01 WS-Called-Programs. 12 WS-GetDBId PIC X(8) VALUE SPACES. 01 EOJ-Display-Messages. 12 EOJ-End-Message PIC X(042) VALUE \"*** Program CUSTINQ - End of Run Messages\". PROCEDURE DIVISION. 0000-Mainline. PERFORM 1000-Begin-Job. PERFORM 2000-Process. PERFORM 3000-End-Job. GOBACK. 1000-Begin-Job. PERFORM 9800-Connect-to-DB1. IF SQL-STATUS-OK SET WS-Keep-Looking TO TRUE END-IF. 2000-Process. PERFORM 2100-Display-Customer UNTIL WS-Stop-Looking. 2100-Display-Customer. PERFORM 2110-Accept-Customer-Number. IF WS-Keep-Looking PERFORM 2120-Get-Customer-Row IF WS-Customer-Found PERFORM 2130-Display-Customer-Lines ELSE PERFORM 2140-Display-Error-Lines END-IF END-IF. 2110-Accept-Customer-Number. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY 'Key in the next Customer Number and press Enter,'. DISPLAY 'or key in 999999 and press Enter to quit.'. ACCEPT HV-Cust-Number. IF HV-Cust-Number = '999999' SET WS-Stop-Looking TO TRUE END-IF. 2120-Get-Customer-Row. PERFORM 5000-Read-DB1. 2130-Display-Customer-Lines. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY ' Customer: ' HV-Cust-Number. DISPLAY ' Name: ' FUNCTION TRIM(HV-Cust-First-Name), SPACE, FUNCTION TRIM(HV-Cust-Last-Name). DISPLAY ' Address: ' FUNCTION TRIM(HV-Cust-Address). DISPLAY ' ' FUNCTION TRIM(HV-Cust-City), SPACE, HV-Cust-State, SPACE, HV-Cust-ZipCode. DISPLAY '-------------------------------------------------'. 2140-Display-Error-Lines. DISPLAY '-------------Customer Inquiry--------------------'. DISPLAY '-------------------------------------------------'. DISPLAY ' Customer: ' HV-Cust-Number ' was not found.'. 3000-End-Job. EXEC SQL CONNECT RESET END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. 5000-Read-DB1. EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :HV-Cust-Number, :HV-Cust-First-Name, :HV-Cust-Last-Name, :HV-Cust-Address, :HV-Cust-City, :HV-Cust-State, :HV-Cust-ZipCode FROM CUSTOMERS WHERE CUSTNO = :HV-Cust-Number END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. IF SQL-STATUS-OK SET WS-Customer-Found TO TRUE ELSE IF SQL-STATUS-NOT-FOUND SET WS-Customer-Not-Found TO TRUE ELSE DISPLAY \"*** WARNING ***\" DISPLAY \"There was a problem Fetching the cursor.\" DISPLAY \"SQLCODE = \" SQLCODE PERFORM 3000-End-Job MOVE 8 TO RETURN-CODE GOBACK END-IF END-IF. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. MOVE 'GETDBID' TO WS-GetDBId CALL WS-GetDBId USING DB-User-ID, DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK PERFORM 9816-Create-Cursor-DB1 IF SQL-STATUS-OK PERFORM 9818-Open-Cursor-DB1 END-IF END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS. 9816-Create-Cursor-DB1. * Parms for DB1-C1 *D DISPLAY \"Nothing to do here.\". * As an example: * MOVE \"DESIGNER\" TO HV-Job-Title. 9818-Open-Cursor-DB1. * This would be where you open a cursor. * Not needed for this program.","title":"The program."},{"location":"guides/gnu-vs-zos-cobol/db2/normal-db2-zos-cobol/","text":"An example of a normal DB2 ZOS COBOL program This is the CUSTINQ program from the Murach book: IDENTIFICATION DIVISION. * PROGRAM-ID. CUSTINQ. * ENVIRONMENT DIVISION. * INPUT-OUTPUT SECTION. * FILE-CONTROL. * DATA DIVISION. * FILE SECTION. * WORKING-STORAGE SECTION. * 01 SWITCHES. * 05 END-OF-INQUIRIES-SW PIC X VALUE 'N'. 88 END-OF-INQUIRIES VALUE 'Y'. 05 CUSTOMER-FOUND-SW PIC X. 88 CUSTOMER-FOUND VALUE 'Y'. * EXEC SQL INCLUDE CUSTOMER END-EXEC. * EXEC SQL INCLUDE SQLCA END-EXEC. * PROCEDURE DIVISION. * 000-DISPLAY-CUSTOMER-ROWS. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. * 100-DISPLAY-CUSTOMER-ROW. * PERFORM 110-ACCEPT-CUSTOMER-NUMBER. IF NOT END-OF-INQUIRIES MOVE 'Y' TO CUSTOMER-FOUND-SW PERFORM 120-GET-CUSTOMER-ROW IF CUSTOMER-FOUND PERFORM 130-DISPLAY-CUSTOMER-LINES ELSE PERFORM 140-DISPLAY-ERROR-LINES. * 110-ACCEPT-CUSTOMER-NUMBER. * DISPLAY '------------------------------------------------'. DISPLAY 'KEY IN THE NEXT CUSTOMER NUMBER AND PRESS ENTER,'. DISPLAY 'OR KEY IN 999999 AND PRESS ENTER TO QUIT.'. ACCEPT CUSTNO. IF CUSTNO = '999999' MOVE 'Y' TO END-OF-INQUIRIES-SW. * 120-GET-CUSTOMER-ROW. * EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :CUSTNO, :FNAME, :LNAME, :ADDR, :CITY, :STATE, :ZIPCODE FROM MM01.CUSTOMER WHERE CUSTNO = :CUSTNO END-EXEC. * IF SQLCODE NOT = 0 MOVE 'N' TO CUSTOMER-FOUND-SW. * 130-DISPLAY-CUSTOMER-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER ' CUSTNO. DISPLAY ' NAME ' FNAME ' ' LNAME. DISPLAY ' ADDRESS ' ADDR. DISPLAY ' ' CITY ' ' STATE ' ' ZIPCODE. * 140-DISPLAY-ERROR-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER NUMBER ' CUSTNO ' NOT FOUND.'. * This is the code from the WORKING-STORAGE SECTION. EXEC SQL INCLUDE CUSTOMER END-EXEC. * EXEC SQL INCLUDE SQLCA END-EXEC. Notes about this code: Within \"INCLUDE CUSTOMER\", CUSTOMER is the DCLGEN generated copybook member \"CUSTOMER\" has two areas: A \"EXEC SQL DECLARE CUSTOMER TABLE area which lists each column name and data type in the table BUT the data type is a SQL data type, not a COBOL data type. A COBOL declaration of 01-CUSTOMER-ROW which lists each column name and data type in the table BUT the data type is a COBOL data type, not a SQL data type.","title":"A normal ZOS COBOL DB2 pgm"},{"location":"guides/gnu-vs-zos-cobol/db2/normal-db2-zos-cobol/#an-example-of-a-normal-db2-zos-cobol-program","text":"This is the CUSTINQ program from the Murach book: IDENTIFICATION DIVISION. * PROGRAM-ID. CUSTINQ. * ENVIRONMENT DIVISION. * INPUT-OUTPUT SECTION. * FILE-CONTROL. * DATA DIVISION. * FILE SECTION. * WORKING-STORAGE SECTION. * 01 SWITCHES. * 05 END-OF-INQUIRIES-SW PIC X VALUE 'N'. 88 END-OF-INQUIRIES VALUE 'Y'. 05 CUSTOMER-FOUND-SW PIC X. 88 CUSTOMER-FOUND VALUE 'Y'. * EXEC SQL INCLUDE CUSTOMER END-EXEC. * EXEC SQL INCLUDE SQLCA END-EXEC. * PROCEDURE DIVISION. * 000-DISPLAY-CUSTOMER-ROWS. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. * 100-DISPLAY-CUSTOMER-ROW. * PERFORM 110-ACCEPT-CUSTOMER-NUMBER. IF NOT END-OF-INQUIRIES MOVE 'Y' TO CUSTOMER-FOUND-SW PERFORM 120-GET-CUSTOMER-ROW IF CUSTOMER-FOUND PERFORM 130-DISPLAY-CUSTOMER-LINES ELSE PERFORM 140-DISPLAY-ERROR-LINES. * 110-ACCEPT-CUSTOMER-NUMBER. * DISPLAY '------------------------------------------------'. DISPLAY 'KEY IN THE NEXT CUSTOMER NUMBER AND PRESS ENTER,'. DISPLAY 'OR KEY IN 999999 AND PRESS ENTER TO QUIT.'. ACCEPT CUSTNO. IF CUSTNO = '999999' MOVE 'Y' TO END-OF-INQUIRIES-SW. * 120-GET-CUSTOMER-ROW. * EXEC SQL SELECT CUSTNO, FNAME, LNAME, ADDR, CITY, STATE, ZIPCODE INTO :CUSTNO, :FNAME, :LNAME, :ADDR, :CITY, :STATE, :ZIPCODE FROM MM01.CUSTOMER WHERE CUSTNO = :CUSTNO END-EXEC. * IF SQLCODE NOT = 0 MOVE 'N' TO CUSTOMER-FOUND-SW. * 130-DISPLAY-CUSTOMER-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER ' CUSTNO. DISPLAY ' NAME ' FNAME ' ' LNAME. DISPLAY ' ADDRESS ' ADDR. DISPLAY ' ' CITY ' ' STATE ' ' ZIPCODE. * 140-DISPLAY-ERROR-LINES. * DISPLAY '------------------------------------------------'. DISPLAY ' CUSTOMER NUMBER ' CUSTNO ' NOT FOUND.'. * This is the code from the WORKING-STORAGE SECTION. EXEC SQL INCLUDE CUSTOMER END-EXEC. * EXEC SQL INCLUDE SQLCA END-EXEC.","title":"An example of a normal DB2 ZOS COBOL program"},{"location":"guides/gnu-vs-zos-cobol/db2/normal-db2-zos-cobol/#notes-about-this-code","text":"Within \"INCLUDE CUSTOMER\", CUSTOMER is the DCLGEN generated copybook member \"CUSTOMER\" has two areas: A \"EXEC SQL DECLARE CUSTOMER TABLE area which lists each column name and data type in the table BUT the data type is a SQL data type, not a COBOL data type. A COBOL declaration of 01-CUSTOMER-ROW which lists each column name and data type in the table BUT the data type is a COBOL data type, not a SQL data type.","title":"Notes about this code:"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/","text":"ZOS COBOL/DB2 vs GnuCOBOL COBOL/DB2 LUW ZOS COBOL/DB2 RACF - the security system DCLGEN - Create an INCLUDE copybook member that defines the table and adds host variables. GnuCOBOL COBOL/DB2 LUW No RACF. Since there is no RACF, the DB name, the userid, and the password must be supplied to the program for it to connect to the DB. There is a db2dclgn command included with IBM DB2 LUW but it does not generate the table definition within a \"EXEC SQL DECLARE\" statement. It only defines the COBOL host variables. So, you have to create the EXEC SQL DECLARE \"xxxxx\" TABLE statement, the host variables, and the DB Connect variables within the program itself. There may be a way to create that as a copybook but I haven't figured out how to do that yet. Look at the examples to see the differences: Original Code from Murach book This is an example of a Normal ZOS COBOL program. In the repository on GitHub, this is cbl/CUSTINQ.cbl It will not compile with GnuCOBOL. Also, as I'm not sure about the copyright and my ability to \"re-distribute\" the code included in the book, this will the only time I will include the exact original code from the book. I will be using it 2 more times (Version 1 and Version 2) but those have changes made to them to compile and run using GnuCOBOL. As you will see in Version 3, I have my own program structure and style and while the results will be the same as the original, the code will be quite different. Version 1 This is an example of a Converted from ZOS to GnuCOBOL program. In the repository on GitHub, this is cbl/CUSTIN1.sqb I took the example program above: removed the INCLUDE CUSTOMER statement added the EXEC SQL DECLARE TABLE statement added the host variables and the DB Connect variables added Procedure code to use ACCEPT to get the userid and password from the user when the program is run. Version 2 This is an example of an Enhanced GNU COBOL program. In the repository on GitHub, this is cbl/CUSTIN2.sqb I started with the converted GnuCOBOL program above. Created GETDBID program to \"hardcode\" the userid and password. Updated CUSTIN2 to call GETDBID and removed the ACCEPT code. Now the program will run without needing to ask the user for that information. Version 3 This is an example of an My version of CUSTINQ program. In the repository on GitHub, this is cbl/CUSTINQ.sqb As I alluded to in Version 1, this is that completely re-written program. Here's the thing, when I went to school, I completed all the programming assignments, got very good grades and all the professors said I was prepared to get a job as a programmer. At the first job, I was told what I would be doing and was given the name of the program I would work on. I logon to TSO/ISPF, go to the PDS, open the member, start reading it and thought, \"What is this? It looks similar to what I created in school but it is really, really different.\" Every company has a standard and/or style that all(most?) code adheres to. At some shops, it is kind of loose, at others, it is VERY rigid. This is an example of getting the same result; just doing it a different way by applying a different structure to the program. As I continue to add programs to the repositories, they will \"follow along\" with the book or tutorial or website but will be using this structure.","title":"Overview"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#zos-coboldb2-vs-gnucobol-coboldb2-luw","text":"","title":"ZOS COBOL/DB2 vs GnuCOBOL COBOL/DB2 LUW"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#zos-coboldb2","text":"RACF - the security system DCLGEN - Create an INCLUDE copybook member that defines the table and adds host variables.","title":"ZOS COBOL/DB2"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#gnucobol-coboldb2-luw","text":"No RACF. Since there is no RACF, the DB name, the userid, and the password must be supplied to the program for it to connect to the DB. There is a db2dclgn command included with IBM DB2 LUW but it does not generate the table definition within a \"EXEC SQL DECLARE\" statement. It only defines the COBOL host variables. So, you have to create the EXEC SQL DECLARE \"xxxxx\" TABLE statement, the host variables, and the DB Connect variables within the program itself. There may be a way to create that as a copybook but I haven't figured out how to do that yet. Look at the examples to see the differences:","title":"GnuCOBOL COBOL/DB2 LUW"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#original-code-from-murach-book","text":"This is an example of a Normal ZOS COBOL program. In the repository on GitHub, this is cbl/CUSTINQ.cbl It will not compile with GnuCOBOL. Also, as I'm not sure about the copyright and my ability to \"re-distribute\" the code included in the book, this will the only time I will include the exact original code from the book. I will be using it 2 more times (Version 1 and Version 2) but those have changes made to them to compile and run using GnuCOBOL. As you will see in Version 3, I have my own program structure and style and while the results will be the same as the original, the code will be quite different.","title":"Original Code from Murach book"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#version-1","text":"This is an example of a Converted from ZOS to GnuCOBOL program. In the repository on GitHub, this is cbl/CUSTIN1.sqb I took the example program above: removed the INCLUDE CUSTOMER statement added the EXEC SQL DECLARE TABLE statement added the host variables and the DB Connect variables added Procedure code to use ACCEPT to get the userid and password from the user when the program is run.","title":"Version 1"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#version-2","text":"This is an example of an Enhanced GNU COBOL program. In the repository on GitHub, this is cbl/CUSTIN2.sqb I started with the converted GnuCOBOL program above. Created GETDBID program to \"hardcode\" the userid and password. Updated CUSTIN2 to call GETDBID and removed the ACCEPT code. Now the program will run without needing to ask the user for that information.","title":"Version 2"},{"location":"guides/gnu-vs-zos-cobol/db2/overview-db2-zos-vs-gnu-cobol/#version-3","text":"This is an example of an My version of CUSTINQ program. In the repository on GitHub, this is cbl/CUSTINQ.sqb As I alluded to in Version 1, this is that completely re-written program. Here's the thing, when I went to school, I completed all the programming assignments, got very good grades and all the professors said I was prepared to get a job as a programmer. At the first job, I was told what I would be doing and was given the name of the program I would work on. I logon to TSO/ISPF, go to the PDS, open the member, start reading it and thought, \"What is this? It looks similar to what I created in school but it is really, really different.\" Every company has a standard and/or style that all(most?) code adheres to. At some shops, it is kind of loose, at others, it is VERY rigid. This is an example of getting the same result; just doing it a different way by applying a different structure to the program. As I continue to add programs to the repositories, they will \"follow along\" with the book or tutorial or website but will be using this structure.","title":"Version 3"},{"location":"guides/gnu-vs-zos-cobol/db2/specific-changes-for-gnucobol/","text":"An overview of the specific changes made to make it run using GnuCOBOL Since DCLGEN isn't the same on IBM DB2 LUW, create that ***** Convert to GnuCOBOL ***** Start of Step 1 * No DCLGEN member to INCLUDE * Comment this INCLUDE out * EXEC SQL * INCLUDE CUSTOMER * END-EXEC. * * Add DECLARE TABLE EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. * Add DECLARE SECTION EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 Customer-Row. 12 CUSTNO PIC X(06). 12 FNAME PIC X(20). 12 LNAME PIC X(30). 12 ADDR PIC X(30). 12 CITY PIC X(20). 12 STATE PIC X(02). 12 ZIPCODE PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. * Add status check for connection info. 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. ***** End of Step 1 Add the PERFORM paragraph 000-DISPLAY-CUSTOMER-ROWS. * Step 2 * Add Paragraph to connect to the DB PERFORM 9800-Connect-to-DB1. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. Then add the 9800-Connect-to DB1 and friends paragraphs * Step 2 - the actual connection. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"CUSTINQ: userid and/or password invalid\" DISPLAY \"CUSTINQ: Can not connect, exiting\" GOBACK END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS.","title":"An overview of the specific changes made to make it run using GnuCOBOL"},{"location":"guides/gnu-vs-zos-cobol/db2/specific-changes-for-gnucobol/#an-overview-of-the-specific-changes-made-to-make-it-run-using-gnucobol","text":"","title":"An overview of the specific changes made to make it run using GnuCOBOL"},{"location":"guides/gnu-vs-zos-cobol/db2/specific-changes-for-gnucobol/#since-dclgen-isnt-the-same-on-ibm-db2-luw-create-that","text":"***** Convert to GnuCOBOL ***** Start of Step 1 * No DCLGEN member to INCLUDE * Comment this INCLUDE out * EXEC SQL * INCLUDE CUSTOMER * END-EXEC. * * Add DECLARE TABLE EXEC SQL DECLARE CUSTOMERS TABLE ( CUSTNO CHAR(6) not null, FNAME CHAR(20) not null, LNAME CHAR(30) not null, ADDR CHAR(30) not null, CITY CHAR(20) not null, STATE CHAR(2) not null, ZIPCODE CHAR(10) not null) END-EXEC. * Add DECLARE SECTION EXEC SQL BEGIN DECLARE SECTION END-EXEC. 01 Customer-Row. 12 CUSTNO PIC X(06). 12 FNAME PIC X(20). 12 LNAME PIC X(30). 12 ADDR PIC X(30). 12 CITY PIC X(20). 12 STATE PIC X(02). 12 ZIPCODE PIC X(10). * This is hardcoded for the MURACH DB. * You might need to update this for your DB. 01 DB-Connection-Info. 12 DB-Alias PIC X(8) VALUE 'MURACH'. 12 DB-User-ID PIC X(10). 12 DB-Password. 15 DB-Passwd-Length PIC S9(4) COMP-5 VALUE 0. 15 DB-Passwd-Name PIC X(18). EXEC SQL END DECLARE SECTION END-EXEC. * Add status check for connection info. 01 WS-SQL-STATUS PIC S9(9) COMP-5. 88 SQL-STATUS-OK VALUE 0. 88 SQL-STATUS-NOT-FOUND VALUE 100. 88 SQL-STATUS-DUP VALUE -803. ***** End of Step 1","title":"Since DCLGEN isn't the same on IBM DB2 LUW, create that"},{"location":"guides/gnu-vs-zos-cobol/db2/specific-changes-for-gnucobol/#add-the-perform-paragraph","text":"000-DISPLAY-CUSTOMER-ROWS. * Step 2 * Add Paragraph to connect to the DB PERFORM 9800-Connect-to-DB1. * PERFORM 100-DISPLAY-CUSTOMER-ROW UNTIL END-OF-INQUIRIES. STOP RUN. Then add the 9800-Connect-to DB1 and friends paragraphs * Step 2 - the actual connection. 9800-Connect-to-DB1. PERFORM 9810-Setup-DB1-Connection. IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"*** The DB connection is not valid!***\" DISPLAY \"Exiting the program.!\" GOBACK END-IF. 9810-Setup-DB1-Connection. PERFORM 9811-Get-Credentials. PERFORM 9812-Create-Connection-To-DB1. 9811-Get-Credentials. DISPLAY \"CUSTINQ: Need userid and password\". DISPLAY \"Enter your user id (default none): \" WITH NO ADVANCING. ACCEPT DB-User-ID. DISPLAY \"Enter your password : \" WITH NO ADVANCING ACCEPT DB-Passwd-Name. * Passwords in a CONNECT statement must be entered in a VARCHAR * format with the length of the input string. INSPECT DB-Passwd-Name TALLYING DB-Passwd-Length FOR CHARACTERS BEFORE INITIAL \" \". 9812-Create-Connection-To-DB1. PERFORM 9814-Connect-To-DB1 IF SQL-STATUS-OK CONTINUE ELSE DISPLAY \"CUSTINQ: userid and/or password invalid\" DISPLAY \"CUSTINQ: Can not connect, exiting\" GOBACK END-IF. 9814-Connect-To-DB1. EXEC SQL CONNECT TO :DB-Alias USER :DB-User-ID USING :DB-Passwd-Name END-EXEC. MOVE SQLCODE TO WS-SQL-STATUS.","title":"Add the PERFORM paragraph"},{"location":"guides/install-db2-luw/install-basic-dev-env/","text":"Create a Basic Develoment Environment. Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu. Overview As I stated in the main overview, the host system already has a dev environment installed. As this is a new installation and you need something to code with, I am recommending the following tools to be productive: This is highly opinionated. If you have your own envionment, create that instead. build-essential : a collection of tools used to build software zsh : a different shell then bash prezto : a zsh framework Git : Source Code Management Vim : for quick edits VS Codium : Not an editor, Not an IDE, Something in the middle Java JDK : Need for Code4Z extension Some VS Codium extensions Midnight Commander (aka: mc) : A terminal based file manager An SSH key : to push code to a GitHub or GitLab or Bitbucket repository tree : Optional: a quick way to see the structure of a directory LazyGit : Optional: A terminal based Git UI : This one is really optional. You can use GitLens within VS Codium to do the same, I just like it. Build-Essential sudo apt install build-essential This might be installed already or there might be some components that are missing. Better safe then sorry. Zsh sudo apt install zsh Prezto Visit Github: Prezto and follow the instructions. You can use it as it is out of the box but I will suggest one change of two additions: Edit .zpreztorc and add git and syntax-highlighting in the zstyle ':prezto:load' pmodule \\ section: Old version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'history-substring-search' \\ 'prompt' New Version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'git' \\ 'syntax-highlighting' \\ 'history-substring-search' \\ 'prompt' Save it, close Terminal then open Terminal. Git Actually, Git is already installed on Pop!_OS but if you went the Ubuntu route, you might have to install it. sudo apt install git Vim sudo apt install vim A very dependable editor. Useful for quick edits or as your main editor. VS Codium Because... why not. Go to VS Codium website . Follow the instructions: - Add GPG key - Add the repository - Update and Install codium Java JDK sudo apt install default-jdk VS Codium Extensions Open VSCodium, Open the Extensions Browser and install: Code4Z GitLens You could also go with IBM Z Open Editor instead. BUT don't have both installed at the same time. Midnight Commander (aka: mc) sudo apt install mc This is a nice terminal based file manager that I use to transfer files to/from the host/vm and move stuff around in general. SSH-Key For instructions: Look at GitHub - Connect with SSH . Tree - Optional sudo apt install tree LazyGit - Optional Follow the instructions on the LazyGit - Github website.","title":"Install Basic Dev Env"},{"location":"guides/install-db2-luw/install-basic-dev-env/#create-a-basic-develoment-environment","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu.","title":"Create a Basic Develoment Environment."},{"location":"guides/install-db2-luw/install-basic-dev-env/#overview","text":"As I stated in the main overview, the host system already has a dev environment installed. As this is a new installation and you need something to code with, I am recommending the following tools to be productive: This is highly opinionated. If you have your own envionment, create that instead. build-essential : a collection of tools used to build software zsh : a different shell then bash prezto : a zsh framework Git : Source Code Management Vim : for quick edits VS Codium : Not an editor, Not an IDE, Something in the middle Java JDK : Need for Code4Z extension Some VS Codium extensions Midnight Commander (aka: mc) : A terminal based file manager An SSH key : to push code to a GitHub or GitLab or Bitbucket repository tree : Optional: a quick way to see the structure of a directory LazyGit : Optional: A terminal based Git UI : This one is really optional. You can use GitLens within VS Codium to do the same, I just like it.","title":"Overview"},{"location":"guides/install-db2-luw/install-basic-dev-env/#build-essential","text":"sudo apt install build-essential This might be installed already or there might be some components that are missing. Better safe then sorry.","title":"Build-Essential"},{"location":"guides/install-db2-luw/install-basic-dev-env/#zsh","text":"sudo apt install zsh","title":"Zsh"},{"location":"guides/install-db2-luw/install-basic-dev-env/#prezto","text":"Visit Github: Prezto and follow the instructions. You can use it as it is out of the box but I will suggest one change of two additions: Edit .zpreztorc and add git and syntax-highlighting in the zstyle ':prezto:load' pmodule \\ section: Old version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'history-substring-search' \\ 'prompt' New Version: zstyle ':prezto:load' pmodule \\ 'environment' \\ 'terminal' \\ 'editor' \\ 'history' \\ 'directory' \\ 'spectrum' \\ 'utility' \\ 'completion' \\ 'git' \\ 'syntax-highlighting' \\ 'history-substring-search' \\ 'prompt' Save it, close Terminal then open Terminal.","title":"Prezto"},{"location":"guides/install-db2-luw/install-basic-dev-env/#git","text":"Actually, Git is already installed on Pop!_OS but if you went the Ubuntu route, you might have to install it. sudo apt install git","title":"Git"},{"location":"guides/install-db2-luw/install-basic-dev-env/#vim","text":"sudo apt install vim A very dependable editor. Useful for quick edits or as your main editor.","title":"Vim"},{"location":"guides/install-db2-luw/install-basic-dev-env/#vs-codium","text":"Because... why not. Go to VS Codium website . Follow the instructions: - Add GPG key - Add the repository - Update and Install codium","title":"VS Codium"},{"location":"guides/install-db2-luw/install-basic-dev-env/#java-jdk","text":"sudo apt install default-jdk","title":"Java JDK"},{"location":"guides/install-db2-luw/install-basic-dev-env/#vs-codium-extensions","text":"Open VSCodium, Open the Extensions Browser and install: Code4Z GitLens You could also go with IBM Z Open Editor instead. BUT don't have both installed at the same time.","title":"VS Codium Extensions"},{"location":"guides/install-db2-luw/install-basic-dev-env/#midnight-commander-aka-mc","text":"sudo apt install mc This is a nice terminal based file manager that I use to transfer files to/from the host/vm and move stuff around in general.","title":"Midnight Commander (aka: mc)"},{"location":"guides/install-db2-luw/install-basic-dev-env/#ssh-key","text":"For instructions: Look at GitHub - Connect with SSH .","title":"SSH-Key"},{"location":"guides/install-db2-luw/install-basic-dev-env/#tree-optional","text":"sudo apt install tree","title":"Tree - Optional"},{"location":"guides/install-db2-luw/install-basic-dev-env/#lazygit-optional","text":"Follow the instructions on the LazyGit - Github website.","title":"LazyGit - Optional"},{"location":"guides/install-db2-luw/install-db2/","text":"Install IBM DB2 LUW RDBMS Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu. Get the software Open Firefox and visit IBM DB2 Products page . Click on the \"Download IBM Db2 Software Community Edition\" link. You will need an IBM account to download the software. There is no cost to create an account and there is no cost to download and run the Db2 Community Edition. Enter all the information it needs. You might have to log back in with your new IBM ID or it may take you to the next page. You will be presented with some marketing stuff. Choose your options and press the Continue button. Since this will be installed on a Linux system, click the download link for \"Linux (x64)\". This will download the file \"v11.5.8_linuxx64_server_dec.tar.gz\". If you didn't change anything, the default location for downloads is \"~/Downloads\". This is okay. Prep for building the software Setup the directory structure People have different ways of setting up the structure in the home directory. When the OS was created, by default, the following directories were created: . \u251c\u2500\u2500 Desktop \u251c\u2500\u2500 Documents \u251c\u2500\u2500 Downloads \u251c\u2500\u2500 Music \u251c\u2500\u2500 Pictures \u251c\u2500\u2500 Public \u251c\u2500\u2500 Templates \u2514\u2500\u2500 Videos Open Terminal and add three more directories, Run: cd mkdir bin builds dev The bin and dev directories will be useful later but for now we will focus on the builds directory. Extract the downloaded file Open Files and go to the Downloads folder. Double click on the v11.5.8_linuxx64_server_dec.tar.gz file. This will open Archive Manager. After a little while, within that, you will see \"server_dec\". Click on the \"Extract\" button in the upper left hand corner. A dialog box will open to select where to extract the file to. Extract the file to the ~/builds directory. When it is done, close the dialog box and close Archive Manager. Rename the directory In Terminal, Run: cd cd builds to go to the builds directory. Make sure the server_dec directory is present, Run: ls Rename server_dec to ibm-db2, Run: mv server_dec ibm-db2 Enter the ibm-db2 directory, Run: cd ibm-db2 Install additional software In Terminal, Run the following commands to install additional software needed to run IBM DB2 LUW: sudo apt install build-essential sudo apt install libaio1 sudo dpkg --add-architecture i386 sudo apt install libstdc++6:i386 sudo apt install libpam0g:i386 sudo apt install ksh Checking Prerequisites Run: ./db2prereqcheck If you went with Pop!_OS, this will fail with a message about \"couldn't recognize the distribution\". Don't worry, it will work. If you installed Ubuntu instead of Pop!_OS, you will see a long list of information and at the bottom it will say that all requrements are met. Installing IBM DB2 LUW as a \"root\" or \"system\" install Run: sudo ./db2setup -f sysreq If you installed Ubuntu instead, Run sudo ./db2setup This will open a small dialog window. Click on New Install Make sure DB2 Version 11.5.8.0 Server Edition is highlighted From what I have read, Purescale is not available on Ubuntu Click Next When you get to the window that has two buttons: Typical or Custom Select Custom. Check the box that you agree to the Licence Click Next When presented with the list of options: Within Application development tools: Check \"Base application development tools\" Go through the rest of the windows accepting the defaults until you see Instance Owner. The next two windows set the password for new userids: db2inst1 and db2fenc1 For the remaining windows, accept the defaults. When it finishes, look through the log file. All should look good except \"Installing TSAMP\". There is a warning for this. To be on the safe side, I rebooted after the install was finished. When it came back up, there were three users to select from on the login window. The \"normal\" userid (the one created when the OS was installed), and the db2inst1 and db2fenc1 userids. Log in with the \"normal\" userid and open Terminal and Run: cd /opt/ibm/db2/V11.5/ Check out the include and samples directories and make sure all the COBOL stuff is present.","title":"Install DB2 LUW"},{"location":"guides/install-db2-luw/install-db2/#install-ibm-db2-luw-rdbms","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu.","title":"Install IBM DB2 LUW RDBMS"},{"location":"guides/install-db2-luw/install-db2/#get-the-software","text":"Open Firefox and visit IBM DB2 Products page . Click on the \"Download IBM Db2 Software Community Edition\" link. You will need an IBM account to download the software. There is no cost to create an account and there is no cost to download and run the Db2 Community Edition. Enter all the information it needs. You might have to log back in with your new IBM ID or it may take you to the next page. You will be presented with some marketing stuff. Choose your options and press the Continue button. Since this will be installed on a Linux system, click the download link for \"Linux (x64)\". This will download the file \"v11.5.8_linuxx64_server_dec.tar.gz\". If you didn't change anything, the default location for downloads is \"~/Downloads\". This is okay.","title":"Get the software"},{"location":"guides/install-db2-luw/install-db2/#prep-for-building-the-software","text":"","title":"Prep for building the software"},{"location":"guides/install-db2-luw/install-db2/#setup-the-directory-structure","text":"People have different ways of setting up the structure in the home directory. When the OS was created, by default, the following directories were created: . \u251c\u2500\u2500 Desktop \u251c\u2500\u2500 Documents \u251c\u2500\u2500 Downloads \u251c\u2500\u2500 Music \u251c\u2500\u2500 Pictures \u251c\u2500\u2500 Public \u251c\u2500\u2500 Templates \u2514\u2500\u2500 Videos Open Terminal and add three more directories, Run: cd mkdir bin builds dev The bin and dev directories will be useful later but for now we will focus on the builds directory.","title":"Setup the directory structure"},{"location":"guides/install-db2-luw/install-db2/#extract-the-downloaded-file","text":"Open Files and go to the Downloads folder. Double click on the v11.5.8_linuxx64_server_dec.tar.gz file. This will open Archive Manager. After a little while, within that, you will see \"server_dec\". Click on the \"Extract\" button in the upper left hand corner. A dialog box will open to select where to extract the file to. Extract the file to the ~/builds directory. When it is done, close the dialog box and close Archive Manager.","title":"Extract the downloaded file"},{"location":"guides/install-db2-luw/install-db2/#rename-the-directory","text":"In Terminal, Run: cd cd builds to go to the builds directory. Make sure the server_dec directory is present, Run: ls Rename server_dec to ibm-db2, Run: mv server_dec ibm-db2 Enter the ibm-db2 directory, Run: cd ibm-db2","title":"Rename the directory"},{"location":"guides/install-db2-luw/install-db2/#install-additional-software","text":"In Terminal, Run the following commands to install additional software needed to run IBM DB2 LUW: sudo apt install build-essential sudo apt install libaio1 sudo dpkg --add-architecture i386 sudo apt install libstdc++6:i386 sudo apt install libpam0g:i386 sudo apt install ksh","title":"Install additional software"},{"location":"guides/install-db2-luw/install-db2/#checking-prerequisites","text":"Run: ./db2prereqcheck If you went with Pop!_OS, this will fail with a message about \"couldn't recognize the distribution\". Don't worry, it will work. If you installed Ubuntu instead of Pop!_OS, you will see a long list of information and at the bottom it will say that all requrements are met.","title":"Checking Prerequisites"},{"location":"guides/install-db2-luw/install-db2/#installing-ibm-db2-luw-as-a-root-or-system-install","text":"Run: sudo ./db2setup -f sysreq If you installed Ubuntu instead, Run sudo ./db2setup This will open a small dialog window. Click on New Install Make sure DB2 Version 11.5.8.0 Server Edition is highlighted From what I have read, Purescale is not available on Ubuntu Click Next When you get to the window that has two buttons: Typical or Custom Select Custom. Check the box that you agree to the Licence Click Next When presented with the list of options: Within Application development tools: Check \"Base application development tools\" Go through the rest of the windows accepting the defaults until you see Instance Owner. The next two windows set the password for new userids: db2inst1 and db2fenc1 For the remaining windows, accept the defaults. When it finishes, look through the log file. All should look good except \"Installing TSAMP\". There is a warning for this. To be on the safe side, I rebooted after the install was finished. When it came back up, there were three users to select from on the login window. The \"normal\" userid (the one created when the OS was installed), and the db2inst1 and db2fenc1 userids. Log in with the \"normal\" userid and open Terminal and Run: cd /opt/ibm/db2/V11.5/ Check out the include and samples directories and make sure all the COBOL stuff is present.","title":"Installing IBM DB2 LUW as a \"root\" or \"system\" install"},{"location":"guides/install-db2-luw/install-gnucobol/","text":"Install GnuCOBOL Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu. Get GnuCOBOL Download the source code from GnuCOBOL As of March 1, 2023, the current version is 3.1.2. For that version, download: gnucobol-3.1.2.tar.xz. If you haven't made any changes, it will be downloaded to the Downloads directory. Extract into builds Open Files, double-click on gnucobol-3.1.2.tar.xz and extract it into the ~/builds directory. Install additional software Open Terminal to install the following: sudo apt install libgmp-dev sudo apt install libdb5.3-dev sudo apt install libncurses-dev sudo apt install libxml2-dev sudo apt install libcjson-dev Configure, Make and Install Run: cd builds/gnucobol-3.1.2 This will take you into the gnucobol-3.1.2 directory. Run: ./configure A whole bunch of messages will print on the screen At the end, there should be some messages that look like: extended screen I/O : ncursesw variable file format : 0 sequential file handler : built-in indexed file handler : BDB mathematical library : GMP XML library : libxml2 JSON library : json-c If there are no errors, Run: make More messages will display, if there are no errors, Run: sudo make install Then Run: sudo ldconfig As a quick test, Run: cobc You should get an error message: cobc: error: no input files For a better test of the install: Create a new directory Create a simple COBOL program Run it. 1: Create a new directory In Terminal, Run: cd mkdir -p ~/dev/cobol/test-cobol cd ~/dev/cobol/test-cobol touch hello.cbl 2: Create a simple COBOL program Open Files, go to the dev/cobol/test-cobol folder. Double-click on hello.cbl. This will open it in Text Editor. Copy the following code and paste it into hello.cbl: IDENTIFICATION DIVISION. PROGRAM-ID. SmallestProgram. DATA DIVISION. FILE SECTION. WORKING-STORAGE SECTION. PROCEDURE DIVISION. MAIN-PROCEDURE. DISPLAY \"Hello world\" STOP RUN. END PROGRAM SmallestProgram. and save it. Go to Terminal, Run: pwd To make sure you are in the ~/dev/cobol/test-cobol directory. Run: cobc -x hello.cbl If it complies correctly, Run: ./hello It should return: Hello world","title":"Install GnuCOBOL"},{"location":"guides/install-db2-luw/install-gnucobol/#install-gnucobol","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu.","title":"Install GnuCOBOL"},{"location":"guides/install-db2-luw/install-gnucobol/#get-gnucobol","text":"Download the source code from GnuCOBOL As of March 1, 2023, the current version is 3.1.2. For that version, download: gnucobol-3.1.2.tar.xz. If you haven't made any changes, it will be downloaded to the Downloads directory.","title":"Get GnuCOBOL"},{"location":"guides/install-db2-luw/install-gnucobol/#extract-into-builds","text":"Open Files, double-click on gnucobol-3.1.2.tar.xz and extract it into the ~/builds directory.","title":"Extract into builds"},{"location":"guides/install-db2-luw/install-gnucobol/#install-additional-software","text":"Open Terminal to install the following: sudo apt install libgmp-dev sudo apt install libdb5.3-dev sudo apt install libncurses-dev sudo apt install libxml2-dev sudo apt install libcjson-dev","title":"Install additional software"},{"location":"guides/install-db2-luw/install-gnucobol/#configure-make-and-install","text":"Run: cd builds/gnucobol-3.1.2 This will take you into the gnucobol-3.1.2 directory. Run: ./configure A whole bunch of messages will print on the screen At the end, there should be some messages that look like: extended screen I/O : ncursesw variable file format : 0 sequential file handler : built-in indexed file handler : BDB mathematical library : GMP XML library : libxml2 JSON library : json-c If there are no errors, Run: make More messages will display, if there are no errors, Run: sudo make install Then Run: sudo ldconfig As a quick test, Run: cobc You should get an error message: cobc: error: no input files For a better test of the install: Create a new directory Create a simple COBOL program Run it.","title":"Configure, Make and Install"},{"location":"guides/install-db2-luw/install-gnucobol/#1-create-a-new-directory","text":"In Terminal, Run: cd mkdir -p ~/dev/cobol/test-cobol cd ~/dev/cobol/test-cobol touch hello.cbl","title":"1: Create a new directory"},{"location":"guides/install-db2-luw/install-gnucobol/#2-create-a-simple-cobol-program","text":"Open Files, go to the dev/cobol/test-cobol folder. Double-click on hello.cbl. This will open it in Text Editor. Copy the following code and paste it into hello.cbl: IDENTIFICATION DIVISION. PROGRAM-ID. SmallestProgram. DATA DIVISION. FILE SECTION. WORKING-STORAGE SECTION. PROCEDURE DIVISION. MAIN-PROCEDURE. DISPLAY \"Hello world\" STOP RUN. END PROGRAM SmallestProgram. and save it. Go to Terminal, Run: pwd To make sure you are in the ~/dev/cobol/test-cobol directory. Run: cobc -x hello.cbl If it complies correctly, Run: ./hello It should return: Hello world","title":"2: Create a simple COBOL program"},{"location":"guides/install-db2-luw/install-sampledb/","text":"Install the Sample DB. Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu. Check the installation In Terminal, Run: su - db2inst1 ksh You will need to enter the password for db2inst1 after the su command. Use ksh for a \"more useable\" command line. A quick check, Run: db2 list database directory returns no DBs. Install Sample DB Run: cd sqllib/bin Run: ./dbsampl to create the Sample DB. Not sure why but this takes a LLLLOOOONNNNGGGG time to complete. To check success, Run: db2 list database directory This should return: System Database Directory Number of entries in the directory = 1 Database 1 entry: Database alias = SAMPLE Database name = SAMPLE Local database directory = /home/db2inst1 Database release level = 15.00 Comment = Directory entry type = Indirect Catalog database partition number = 0 Alternate server hostname = Alternate server port number = Now Run: db2 This will take you inside DB2 and provide the DB2 prompt. Then Run: connect to sample This will return: Database Connection Information Database server = DB2/LINUXX8664 11.5.8.0 SQL authorization ID = DB2INST1 Local database alias = SAMPLE Then Run: select * from employee This will return a listing of 42 employees Run: quit to exit DB2 and return to the command prompt. Then Run twice: exit to exit the ksh shell and exit db2inst1 and become the \"normal\" user again. Install db2profile in .bashrc As the \"normal\" user, you will need to run some DB2 commands in Terminal. To make this possible, add the following 4 lines to the bottom of the .bashrc file which is found in home directory. # The following three lines have been added by UDB DB2. if [ -f /home/db2inst1/sqllib/db2profile ]; then . /home/db2inst1/sqllib/db2profile fi This will also export some very useful environment variables. You will need to exit and re-open Terminal for them to be activated.","title":"Install Sample DB and db2profile"},{"location":"guides/install-db2-luw/install-sampledb/#install-the-sample-db","text":"Make sure you are running these steps in the VM you created running as the normal user. These instructions are for Pop!_OS, they should be similar for Ubuntu.","title":"Install the Sample DB."},{"location":"guides/install-db2-luw/install-sampledb/#check-the-installation","text":"In Terminal, Run: su - db2inst1 ksh You will need to enter the password for db2inst1 after the su command. Use ksh for a \"more useable\" command line. A quick check, Run: db2 list database directory returns no DBs.","title":"Check the installation"},{"location":"guides/install-db2-luw/install-sampledb/#install-sample-db","text":"Run: cd sqllib/bin Run: ./dbsampl to create the Sample DB. Not sure why but this takes a LLLLOOOONNNNGGGG time to complete. To check success, Run: db2 list database directory This should return: System Database Directory Number of entries in the directory = 1 Database 1 entry: Database alias = SAMPLE Database name = SAMPLE Local database directory = /home/db2inst1 Database release level = 15.00 Comment = Directory entry type = Indirect Catalog database partition number = 0 Alternate server hostname = Alternate server port number = Now Run: db2 This will take you inside DB2 and provide the DB2 prompt. Then Run: connect to sample This will return: Database Connection Information Database server = DB2/LINUXX8664 11.5.8.0 SQL authorization ID = DB2INST1 Local database alias = SAMPLE Then Run: select * from employee This will return a listing of 42 employees Run: quit to exit DB2 and return to the command prompt. Then Run twice: exit to exit the ksh shell and exit db2inst1 and become the \"normal\" user again.","title":"Install Sample DB"},{"location":"guides/install-db2-luw/install-sampledb/#install-db2profile-in-bashrc","text":"As the \"normal\" user, you will need to run some DB2 commands in Terminal. To make this possible, add the following 4 lines to the bottom of the .bashrc file which is found in home directory. # The following three lines have been added by UDB DB2. if [ -f /home/db2inst1/sqllib/db2profile ]; then . /home/db2inst1/sqllib/db2profile fi This will also export some very useful environment variables. You will need to exit and re-open Terminal for them to be activated.","title":"Install db2profile in .bashrc"},{"location":"guides/install-db2-luw/install-vm/","text":"Install a Virtual Machine There are a number of virtualization products available to create a Virtual Machine on your computer: Oracle VM VirtualBox, VMWare, QEMU etc. You may already have one of these installed; if so, go to the next step. If not, pick one of them, and follow the installation instructions for your computer. I use QEMU now but in the past I have used VirtualBox and VMWare. They all work fairly well. Download the Operating System iso Install Pop!_OS Go to the Pop!_OS website press the \"Download\" button. I am using the Pop!_OS 22.04 LTS version. Or use Ubuntu instead As I stated in the overview, Ubuntu is \"offically supported\" so if you want to use that instead: Go to the Ubuntu Desktop website and download the Ubuntu 22.04 LTS version. Three steps to create a VM. Create the VM Follow the instructions for the virtualization product you have installed on your computer to create a VM. Create the \"Harddrive\" that the OS will run on and how big the drive will be. Decide how much memory the VM will be allocated. Other parameters required by the virtualization product. For this project, the parameters I used are: 100GB HD 4GB Ram Install the OS into the VM Follow the instructions for the virtualization product you have installed on your computer to actually install the OS onto the VM harddrive. A word of caution about the userid you create as you install the OS You create a userid when you install the OS and will probably use that userid to run db2 commands. Make sure your userid meets the criteria below: User IDs have the following restrictions and requirements: Must have a primary group other than guests, admins, users, and local. Can include lowercase letters (a-z), numbers (0-9), and the underscore character (_). Cannot be longer than eight characters Cannot begin with IBM, SYS, SQL, or a number. Cannot be a DB2 reserved word (USERS, ADMINS, GUESTS, PUBLIC, or LOCAL), or an SQL reserved word. Cannot use any user IDs with root privilege for the DB2 instance ID, DAS ID, or fenced ID. Cannot include accented characters. This threw me for awhile because I wanted to use \"sysop\" as the userid and the install kept failing. When done with this step, you usually need to shutdown the VM and then run it so it starts up the installed system and not the iso used to install the system. Run the VM and update Follow the instructions for the virtualization product you have installed on your computer to run the VM. A new window should display with a login screen. Login using the userid you setup when installing the OS. Open the Pop!_Shop application. Click on the \"Installed\" button in the titlebar and then click \"Update All\" in the window listing all the updates that can be done. To be \"safe\", after all the updates are done, reboot the system.","title":"Install VM"},{"location":"guides/install-db2-luw/install-vm/#install-a-virtual-machine","text":"There are a number of virtualization products available to create a Virtual Machine on your computer: Oracle VM VirtualBox, VMWare, QEMU etc. You may already have one of these installed; if so, go to the next step. If not, pick one of them, and follow the installation instructions for your computer. I use QEMU now but in the past I have used VirtualBox and VMWare. They all work fairly well.","title":"Install a Virtual Machine"},{"location":"guides/install-db2-luw/install-vm/#download-the-operating-system-iso","text":"","title":"Download the Operating System iso"},{"location":"guides/install-db2-luw/install-vm/#install-pop_os","text":"Go to the Pop!_OS website press the \"Download\" button. I am using the Pop!_OS 22.04 LTS version.","title":"Install Pop!_OS"},{"location":"guides/install-db2-luw/install-vm/#or-use-ubuntu-instead","text":"As I stated in the overview, Ubuntu is \"offically supported\" so if you want to use that instead: Go to the Ubuntu Desktop website and download the Ubuntu 22.04 LTS version.","title":"Or use Ubuntu instead"},{"location":"guides/install-db2-luw/install-vm/#three-steps-to-create-a-vm","text":"","title":"Three steps to create a VM."},{"location":"guides/install-db2-luw/install-vm/#create-the-vm","text":"Follow the instructions for the virtualization product you have installed on your computer to create a VM. Create the \"Harddrive\" that the OS will run on and how big the drive will be. Decide how much memory the VM will be allocated. Other parameters required by the virtualization product. For this project, the parameters I used are: 100GB HD 4GB Ram","title":"Create the VM"},{"location":"guides/install-db2-luw/install-vm/#install-the-os-into-the-vm","text":"Follow the instructions for the virtualization product you have installed on your computer to actually install the OS onto the VM harddrive.","title":"Install the OS into the VM"},{"location":"guides/install-db2-luw/install-vm/#a-word-of-caution-about-the-userid-you-create-as-you-install-the-os","text":"You create a userid when you install the OS and will probably use that userid to run db2 commands. Make sure your userid meets the criteria below: User IDs have the following restrictions and requirements: Must have a primary group other than guests, admins, users, and local. Can include lowercase letters (a-z), numbers (0-9), and the underscore character (_). Cannot be longer than eight characters Cannot begin with IBM, SYS, SQL, or a number. Cannot be a DB2 reserved word (USERS, ADMINS, GUESTS, PUBLIC, or LOCAL), or an SQL reserved word. Cannot use any user IDs with root privilege for the DB2 instance ID, DAS ID, or fenced ID. Cannot include accented characters. This threw me for awhile because I wanted to use \"sysop\" as the userid and the install kept failing. When done with this step, you usually need to shutdown the VM and then run it so it starts up the installed system and not the iso used to install the system.","title":"A word of caution about the userid you create as you install the OS"},{"location":"guides/install-db2-luw/install-vm/#run-the-vm-and-update","text":"Follow the instructions for the virtualization product you have installed on your computer to run the VM. A new window should display with a login screen. Login using the userid you setup when installing the OS. Open the Pop!_Shop application. Click on the \"Installed\" button in the titlebar and then click \"Update All\" in the window listing all the updates that can be done. To be \"safe\", after all the updates are done, reboot the system.","title":"Run the VM and update"},{"location":"guides/install-db2-luw/overview/","text":"Overview Let me be blunt. This is not the \"best\" way and it might not be a \"good\" way. It may even be a \"bad\" way and I'm sure that some people will look at this and say: \"Why did you do it \"that\" way?\" But, it does run and it does work. If you have the desire to be able to write COBOL program with embedded SQL statements that access an IBM DB2 LUW RDBMS in a Linux environment... This is \"a\" way. Why this way you ask? I run an Archlinux(ArcoLinux to be precise) system. I can create, compile and run GnuCOBOL programs on that system that run just fine. I haven't installed DB2 on that system, nor do I want to. I have downloaded the Docker DB2 image and can run it but there are problems which I haven't solved yet which prevent me from using that. Lazy of me? Maybe My goal was to learn how to create, compile and run COBOL/DB2 program in a Linux environment. I had a choice of which path to I want to go down first: Fix the problems with Docker or create an Ubuntu VM. I chose the \"Create a VM\" path. IBM DB2 LUW Installation Environment According to the documentation, the only supported Linux environments are RedHat and Ubuntu. Personally, I like the UI for Pop!_OS (by System 76) better and it is based on Ubuntu so I am using that. All the commands work on Ubuntu as well so if you want to use that instead, go for it. You will need to do five things: Create a VM Install IBM DB2 LUW Create the Sample DB Install GnuCOBOL Install a Basic Develoment Environment Can I do this in Windows WSL? You may be asking, \"Windows has the WSL that can install an Ubuntu distribution, can I do this within that?\" I have no idea. I have never used WSL so I don't know what it can or cannot do. I do have a Windows 10 system and I have installed IBM DB2 LUW on that, but I use MingGW for DB2 programs and Cygwin for batch programs. Do a search on the GnuCOBOL discussion board for instructions on how to set that up if you want to go that route.","title":"Overview"},{"location":"guides/install-db2-luw/overview/#overview","text":"Let me be blunt. This is not the \"best\" way and it might not be a \"good\" way. It may even be a \"bad\" way and I'm sure that some people will look at this and say: \"Why did you do it \"that\" way?\" But, it does run and it does work. If you have the desire to be able to write COBOL program with embedded SQL statements that access an IBM DB2 LUW RDBMS in a Linux environment... This is \"a\" way. Why this way you ask? I run an Archlinux(ArcoLinux to be precise) system. I can create, compile and run GnuCOBOL programs on that system that run just fine. I haven't installed DB2 on that system, nor do I want to. I have downloaded the Docker DB2 image and can run it but there are problems which I haven't solved yet which prevent me from using that. Lazy of me? Maybe My goal was to learn how to create, compile and run COBOL/DB2 program in a Linux environment. I had a choice of which path to I want to go down first: Fix the problems with Docker or create an Ubuntu VM. I chose the \"Create a VM\" path.","title":"Overview"},{"location":"guides/install-db2-luw/overview/#ibm-db2-luw-installation-environment","text":"According to the documentation, the only supported Linux environments are RedHat and Ubuntu. Personally, I like the UI for Pop!_OS (by System 76) better and it is based on Ubuntu so I am using that. All the commands work on Ubuntu as well so if you want to use that instead, go for it. You will need to do five things: Create a VM Install IBM DB2 LUW Create the Sample DB Install GnuCOBOL Install a Basic Develoment Environment","title":"IBM DB2 LUW Installation Environment"},{"location":"guides/install-db2-luw/overview/#can-i-do-this-in-windows-wsl","text":"You may be asking, \"Windows has the WSL that can install an Ubuntu distribution, can I do this within that?\" I have no idea. I have never used WSL so I don't know what it can or cannot do. I do have a Windows 10 system and I have installed IBM DB2 LUW on that, but I use MingGW for DB2 programs and Cygwin for batch programs. Do a search on the GnuCOBOL discussion board for instructions on how to set that up if you want to go that route.","title":"Can I do this in Windows WSL?"}]}